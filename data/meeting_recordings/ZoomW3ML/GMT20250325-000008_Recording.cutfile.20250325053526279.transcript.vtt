WEBVTT

1
00:00:02.735 --> 00:00:05.154
Hai: I know Mary has some special announcements to make


2
00:00:05.465 --> 00:00:12.095
Meri Nova: I think I already did. Oh, wait! Wait! Wait! I didn't. I didn't. So let's see.


3
00:00:12.555 --> 00:00:22.284
Meri Nova: we just wanted to like say that from today would be a nice idea to highlight a builder of the week or something.


4
00:00:22.870 --> 00:00:32.844
Meri Nova: We can do it randomly. So it's not gonna be like. At least that's what I thought. Hi, let me know if you have other ideas. But we're just gonna randomly highlight. A person that


5
00:00:32.965 --> 00:00:47.725
Meri Nova: had probably struggled in the beginning and right now is doing much better. And I feel like it's a great example for others, too, to get inspired. And for this week, Hi, who are we highlighting for this week


6
00:00:49.655 --> 00:00:54.594
Hai: So this is supposed to be very special, because we've been watching you guys for a couple of weeks.


7
00:00:54.875 --> 00:00:58.584
Hai: When I say couple of weeks. Anything. What I meant is what 3 weeks


8
00:00:59.915 --> 00:01:01.484
Hai: right? It's been 3 weeks right


9
00:01:01.515 --> 00:01:03.474
Meri Nova: 2 weeks. It's been 2 weeks


10
00:01:03.475 --> 00:01:04.825
Hai: Okay, 2 weeks.


11
00:01:05.085 --> 00:01:15.815
Hai: and everyone's going through a different journey right? Some people hit the ground running really fast, others took their time to think about what they wanted to build.


12
00:01:16.165 --> 00:01:22.054
Hai: And a lot of you guys run into things that you've never seen before. And for the 1st time in your life. You have to debug


13
00:01:22.255 --> 00:01:24.175
Hai: stuff built by AI,


14
00:01:24.515 --> 00:01:43.124
Hai: and I don't know how you feel about that. But I think from our perspective, it's very inspirational to see somebody going from 0 to like a hundred just vibe coding and then finding their way out of bugs. So we want to dedicate once a week. We want to dedicate like


15
00:01:43.325 --> 00:01:48.425
Hai: an announcement to some of our students who we think are


16
00:01:48.545 --> 00:01:50.815
Hai: such an inspiration for everyone here.


17
00:01:52.065 --> 00:01:54.705
Hai: So we have. We have a list.


18
00:01:54.895 --> 00:01:56.504
Hai: and Mary's going to say it


19
00:01:58.335 --> 00:02:03.014
Meri Nova: With that you had a list, or you were picking one person


20
00:02:04.535 --> 00:02:05.965
Hai: I said, you have the list.


21
00:02:06.085 --> 00:02:23.785
Meri Nova: I do, just because it was so hard to pick one person, and I feel like that would be unfair for everybody else. But like from the top of my head. I just wanted to let you know that some people are also reaching out to me in the Dms. As well, not just in the general chat, especially those who are like confused or scared, or just overwhelmed


22
00:02:23.785 --> 00:02:24.655
Hai: Weird.


23
00:02:24.795 --> 00:02:27.040
Hai: What did I do? Just kidding


24
00:02:28.115 --> 00:02:53.865
Meri Nova: You didn't do nothing. You're doing great. No, but for those that were so, I just wanted to. 1st of all, say, like Praveena, I just want to give a shout out to Praveena, because we had a conversation before, and I could resonate with like the feelings of overwhelm, and I feel like the 1st few weeks were really tough for many of us, because we basically put you in the middle of the fire and said, you got to figure out.


25
00:02:53.935 --> 00:03:05.955
Meri Nova: and I'm just like so proud of for those who have never coded before and stuck with us with us for like 2 weeks now, and I just want to congratulate Praveena.


26
00:03:06.115 --> 00:03:12.435
Meri Nova: We're doing great and setting up the login page, even though it was hard to figure out.


27
00:03:12.475 --> 00:03:36.784
Meri Nova: And I have another second person that I think is worth highlighting. Hi, feel free to like add more people, too. But these are just like from the top of my head. Everyone. It doesn't mean that everybody else is not doing great. In fact, there are so many amazing people. But I know that you guys are already doing great. I mean, you're already like an a-list. But I'm talking about people who have been struggling a little bit, and I just want to give a shout out


28
00:03:36.785 --> 00:03:43.074
Meri Nova: to those people. And second person I had in mind was Kelsey. I just think that you're doing amazing, Kelsey.


29
00:03:43.335 --> 00:04:03.055
Meri Nova: You did a great like, I know you were struggling with your data set. And then you said, Wait a minute, let me regroup. Let me see what's important. And then you completed the thing, and you even put on the demo. So I think that was awesome. So would love to highlight more people more like stories like these so feel free to share, like


30
00:04:03.105 --> 00:04:17.595
Meri Nova: your struggles, or whatever you're feeling in the DM. Or even general Chat, because later on you're going to overcome them, and we're going to celebrate you. So I just, I just want to like, say, congratulations, guys, let's let's keep building


31
00:04:17.595 --> 00:04:21.224
Praveena Suresh: Thank thank you, Mary. That's very kind of you. Thank you.


32
00:04:21.445 --> 00:04:23.344
Meri Nova: Great job for Rena. Yeah.


33
00:04:23.565 --> 00:04:26.485
kelseydilullo: Yeah, thank you so much. Appreciate the kind words


34
00:04:26.945 --> 00:04:29.364
Meri Nova: Awesome happy to hear this.


35
00:04:29.575 --> 00:04:30.475
Meri Nova: Great.


36
00:04:32.025 --> 00:04:37.245
Meri Nova: I think that's all I wanted to say, Hi, unless you had more people to highlight


37
00:04:38.255 --> 00:04:44.965
Hai: No, I don't. But today we're going to try a new drawing tool called thick jam.


38
00:04:45.165 --> 00:04:47.104
Hai: Does anyone here know what figjam is?


39
00:04:50.855 --> 00:04:51.765
Hai: Nobody


40
00:04:52.528 --> 00:04:56.364
Frederick Z: Is it similar to figma? Because I've heard of figma


41
00:04:57.375 --> 00:05:01.655
Hai: Yeah, it is a tool from figma. Anyone here knows what figma is.


42
00:05:02.915 --> 00:05:05.905
Hai: Yep, anyone here had. Okay, I see some nods.


43
00:05:06.185 --> 00:05:08.894
Hai: So Figma, let me just share my screen real quick.


44
00:05:09.095 --> 00:05:13.075
Hai: Oh, oh, but a great segue!


45
00:05:13.605 --> 00:05:18.115
Hai: So figma is a design tool.


46
00:05:18.375 --> 00:05:21.434
Hai: It's a tool for designers to create.


47
00:05:22.045 --> 00:05:32.974
Hai: you know mock-ups and stuff like that, for, you know, to working in a development team. So designer can work with developers. And now you can even make a design and then export it as code.


48
00:05:33.255 --> 00:05:34.494
Hai: which is really cool.


49
00:05:36.605 --> 00:05:39.145
Hai: Side fun. Fact. My sister works at Figma.


50
00:05:39.757 --> 00:05:45.405
Hai: So I'm supposed to be like the cool, techie, little brother. But then my sister has


51
00:05:45.505 --> 00:05:52.515
Hai: more interesting job. So it's like, it's like a rivalry that never ends. Unfortunately.


52
00:05:52.978 --> 00:05:59.864
Hai: But I'm going to send out this link for you guys so that we can all hop on this fig jam together.


53
00:06:00.565 --> 00:06:04.005
Hai: Let me drop this in the chat real quick


54
00:06:06.485 --> 00:06:07.135
Meri Nova: Is it gonna help


55
00:06:07.135 --> 00:06:07.635
Hai: Okay.


56
00:06:07.635 --> 00:06:08.914
Meri Nova: Space for all of us.


57
00:06:09.525 --> 00:06:10.215
Hai: Oh, yeah.


58
00:06:14.475 --> 00:06:18.935
Hai: okay, I'm seeing orange so fast that I just dropped this thing in.


59
00:06:19.925 --> 00:06:21.225
Hai: Hello, everybody.


60
00:06:22.515 --> 00:06:36.394
Hai: When I was at my last job. Whenever we're on like a fake jam with like 20 or 30 people or so, you have to pay really close attention, so that your cursor doesn't touch someone else's cursor without their consent. Otherwise everyone gets into trouble.


61
00:06:40.675 --> 00:06:43.355
Hai: Okay, everybody.


62
00:06:43.901 --> 00:06:46.814
Hai: Today, we're going to be talking about


63
00:06:47.185 --> 00:07:01.805
Hai: arguably, one of the most important foundation towards understanding agents. It's a couple of topics we're going to talk about. One of them is tool calling and the other one is structured outputs.


64
00:07:02.605 --> 00:07:08.325
Hai: So let me just write that out here real quick. One is tool calling.


65
00:07:09.655 --> 00:07:18.104
Hai: And then I like how everyone, just all of a sudden just stops when I start typing. The other one is structured


66
00:07:20.275 --> 00:07:21.555
Hai: outputs.


67
00:07:23.205 --> 00:07:24.085
Hai: Okay?


68
00:07:24.335 --> 00:07:27.654
Hai: So I have a question for everyone here.


69
00:07:28.740 --> 00:07:31.905
Hai: Oh, there's a table. Hold on! Hold on!


70
00:07:33.005 --> 00:07:35.165
Hai: There we go! That's that's way. Better.


71
00:07:36.355 --> 00:07:45.205
Hai: We have an upgrade guys. This is not free Excali draw silliness. This is multi-billion dollar


72
00:07:45.445 --> 00:07:48.305
Hai: company's tool. Okay, so


73
00:07:48.705 --> 00:07:54.255
Hai: tool calling and structure outputs, I'm sure, for some of you guys, these are familiar terms. So


74
00:07:54.535 --> 00:07:58.355
Hai: does anyone want to take a jab at explaining


75
00:07:58.595 --> 00:08:01.574
Hai: tool? What tool calling is on the call


76
00:08:01.575 --> 00:08:18.755
Sagar: So tool call is to my understanding, is like a Plugin to the Llm. To do the work that by default Llm. May not be able to do it. Structured output would be something to have a standard response structure so that you can parse it like a Json or something.


77
00:08:19.295 --> 00:08:23.625
Sagar: So that you can parse the output and do the next steps


78
00:08:24.365 --> 00:08:28.774
Hai: Okay, I'm just gonna correct that 1st part that you said there real quick.


79
00:08:28.885 --> 00:08:31.584
Hai: So for tool calling.


80
00:08:31.945 --> 00:08:41.045
Hai: What it means is that you. It's it's a large sandwich model plus an application. So the large sandwich model is taken in an input.


81
00:08:41.145 --> 00:08:45.654
Hai: and it's basically fine-tuned or pre-fit in a way. So that


82
00:08:45.895 --> 00:08:54.365
Hai: if the input has a list of tools on the output, it will output the tool that is the most relevant for the conversation.


83
00:08:55.005 --> 00:09:01.465
Hai: That's basically it. So for example, I say to an Llm that, hey, like you are an expert at.


84
00:09:01.935 --> 00:09:02.844
Hai: you know.


85
00:09:02.965 --> 00:09:21.574
Hai: a couple of different things. You have access to a tool that get you the weather. You have access to a tool that get you the stock price. And the next message I have for it is. What is the current stock price for Tesla? I know it's going to go. It's been going down for a while, so I'm like, what's the stock price for Tesla.


86
00:09:23.035 --> 00:09:44.455
Hai: Large language models nowadays is smart enough to know that, hey? I'm asking for a particular tool, and it's supposed to choose a tool as long as I put that little prompt in my system message that says you are an expert at choosing tool, you have access to these tools, and you only output the tool


87
00:09:45.058 --> 00:09:53.705
Hai: so like you, only so realistically, you only have to worry about prompting it to use tools.


88
00:09:53.815 --> 00:09:57.895
Hai: If you're using an open source model. If you're using a model that is like.


89
00:09:58.285 --> 00:10:04.715
Hai: kind of have no infrastructure around it. So kind of like a llama 3.3. That is, you setting up


90
00:10:06.445 --> 00:10:14.025
Hai: from scratch. But if you're hitting like Openai, if you're hitting like any frontier models right now, like


91
00:10:14.255 --> 00:10:16.785
Hai: cohere or anthropic.


92
00:10:16.945 --> 00:10:28.434
Hai: you usually have a parameter that allows you to turn on this thing called tool calling, and then you're passing a list of tools, and then they will do that for you and Sargai was right. That for tool calling


93
00:10:28.595 --> 00:10:37.785
Hai: you now move from an Llm. Doing just, you know, text generation to now. Lm, deciding what code to run or what functions to run.


94
00:10:38.735 --> 00:10:42.695
Hai: So that's basically it. So does anyone want to like


95
00:10:43.665 --> 00:10:50.185
Hai: take a jab at recapping what I just said, just to see if you like, understood


96
00:10:50.325 --> 00:10:56.275
Hai: what tool calling is, and you can say it wrong. I don't care. I'll tell you


97
00:10:57.515 --> 00:10:57.895
Autumn Hicks: Yes.


98
00:10:57.895 --> 00:10:59.414
Hai: Nothing wrong with that. Yeah.


99
00:10:59.775 --> 00:11:08.205
Autumn Hicks: Sure. So utilizing external Apis and other other tools with an Llm. To call on them. Is, am I getting that correct?


100
00:11:08.785 --> 00:11:15.795
Hai: Yeah, that's pretty much it, and not, you know, not constrained to just 3rd party. Apis, these are literally just like


101
00:11:15.895 --> 00:11:26.874
Hai: code function. So like when you write like, you know, a function in Javascript like that's 1 of the use cases. So go ahead and write that under tool calling like the definition that you just said


102
00:11:30.753 --> 00:11:32.395
Meri Nova: We got to write things


103
00:11:33.255 --> 00:11:36.185
Hai: Yeah, I'm like getting lazier and lazier every week. So.


104
00:11:37.035 --> 00:11:42.665
Hai: starting today, I'm not writing the tables. Next week, I'll I'll let somebody else do the presentation


105
00:11:42.665 --> 00:11:46.205
Meri Nova: Oh, my God! I don't think there's permission, though, to write


106
00:11:46.695 --> 00:11:47.985
Hai: Okay, approve.


107
00:11:48.838 --> 00:11:57.375
Hai: Let's see, or hmm, was this in? Let's see if this


108
00:11:58.325 --> 00:12:00.184
Hai: okay, can you guys right now


109
00:12:06.465 --> 00:12:07.245
Meri Nova: Let's see.


110
00:12:08.545 --> 00:12:10.185
Oren: Nope, it won't work


111
00:12:12.055 --> 00:12:18.084
Hai: So anticlimactic hold on can view, can edit, can


112
00:12:18.085 --> 00:12:22.054
demetrios dolios: But yeah, double click inside and start typing. I I was able to


113
00:12:22.665 --> 00:12:23.265
Hai: And if you


114
00:12:23.955 --> 00:12:24.645
demetrios dolios: Though


115
00:12:26.895 --> 00:12:28.514
Hai: Okay, can you guys edit it? Now.


116
00:12:29.095 --> 00:12:30.265
Meri Nova: Yeah, you're right?


117
00:12:32.065 --> 00:12:35.575
Hai: Alright, I think autumn is. It's autumn's turn


118
00:12:40.565 --> 00:12:42.815
Autumn Hicks: Okay, yeah, I think I have access. Hang on


119
00:12:49.345 --> 00:12:57.315
Meri Nova: I think we need to do. There's on the panel on the bottom. It says, View. Only you need to ask to edit, and then it automatically approves you.


120
00:12:57.565 --> 00:12:59.105
Meri Nova: That's what happened to me.


121
00:13:02.405 --> 00:13:04.605
Hai: I think I made it so anyone can edit now.


122
00:13:04.705 --> 00:13:06.315
Hai: maybe you need to refresh or something


123
00:13:06.315 --> 00:13:07.565
Meri Nova: Yeah. Refresh.


124
00:13:09.145 --> 00:13:10.915
Hai: Do, do! Do!


125
00:13:12.515 --> 00:13:14.214
Hai: Oh, somebody's typing something


126
00:13:16.595 --> 00:13:19.136
Meri Nova: Dwayne, that's not your turn.


127
00:13:19.645 --> 00:13:21.470
Autumn Hicks: It's working now. Okay, hang on


128
00:13:22.435 --> 00:13:23.955
Dwayne Joseph: Dwayne didn't type anything.


129
00:13:24.275 --> 00:13:25.315
Meri Nova: Oh!


130
00:13:25.315 --> 00:13:26.477
Autumn Hicks: That was me


131
00:13:26.865 --> 00:13:28.590
Meri Nova: Okay. Okay.


132
00:13:30.705 --> 00:13:32.718
Hai: Doing something.


133
00:13:38.645 --> 00:13:41.926
Autumn Hicks: I'm trying to think of another word other than just tools.


134
00:13:42.365 --> 00:13:45.694
Autumn Hicks: Hello, the plus tools. There we go. Thank you.


135
00:13:50.215 --> 00:13:56.615
Hai: Yeah, so it could be external functions, internal functions like internal in terms of like inside of your application.


136
00:13:59.083 --> 00:14:05.105
Hai: Yeah. So while we're doing that. Let me pull up the AI SDK,


137
00:14:05.575 --> 00:14:07.414
Hai: and I'll show you guys what


138
00:14:07.545 --> 00:14:11.954
Hai: how you can do that in in here, so


139
00:14:12.715 --> 00:14:16.655
Hai: you you can go into the documentation. You can look up tool calling.


140
00:14:17.619 --> 00:14:20.315
Hai: Let's see tool calling.


141
00:14:21.235 --> 00:14:23.635
Hai: Yeah. So this right here


142
00:14:24.025 --> 00:14:32.504
Hai: tools are objects that can be called by the model to perform a specific task. AI SDK Core contains 3 elements, description parameters execute.


143
00:14:32.875 --> 00:14:34.025
Hai: Okay? So


144
00:14:34.425 --> 00:14:47.895
Hai: now that we know that when you give a list of tools to a large language model and tell it that. Hey, you can use these tools. It will return back the tool name not only that it can also return back the parameters or the arguments that can go inside the function.


145
00:14:48.045 --> 00:15:00.895
Hai: So, for example, I have like get weather function, and inside of the get weather function. I have like an argument, for, like city name, the large language model is smart enough to that to look at my query and be like, Hey, okay, this person is asking about like


146
00:15:01.235 --> 00:15:09.585
Hai: San Francisco. So I'm going to extract that and then throw that into the tool call and then run, run the tool with the new parameter.


147
00:15:11.115 --> 00:15:15.054
Hai: So let's take a look at the the sample code here.


148
00:15:15.435 --> 00:15:33.065
Hai: So here, if you're using like nextjs and typescript. And you're using AI SDK, what you'll see is you can basically use the same method as when you were generating like regular text. It still generate text, and then you pass in like your Gpt. 4. 0, whatever.


149
00:15:33.075 --> 00:15:48.604
Hai: But then you have this like property that you can pass in this property called tools, and then in here. What you can do is you can pass in like, you know, different tools. So the way you do that is, you create a property name, and then the property value


150
00:15:48.985 --> 00:16:12.724
Hai: so it could be weather. It could be like stock whatever. As long as you don't have like a space between, and then you use this thing called tool, which you import from from the AI SDK to define the actual tool that the AI can use. And this is really funny, because this is basically giving it to the large language model. Which means that the tool name actually matters. So you want the tool to do like


151
00:16:12.745 --> 00:16:27.824
Hai: get information from or get information from web search. Or, yeah, maybe the tool is called web search. Then you need to call it the web search. You can't just call it like Xyz, because that affects the decision-making process from the Lm.


152
00:16:28.165 --> 00:16:36.404
Hai: And as your application gets a little more complex, what you really want to do is not only have a good name for your tool, but also have a good description.


153
00:16:36.665 --> 00:16:58.605
Hai: The description tells the Llm. When to use it, and you feel free to like in the description, give it examples of when to use it. So, for example, let's say a tool. Your application has a tool for the Llm. To do web search, tell it when to use it. So like, tell it like, Okay, so if you're looking at their messages, history. You're looking at


154
00:16:58.705 --> 00:17:12.035
Hai: the retrieval, and you don't see enough information to answer the user's question. You must use a web search tool, so that in that case it'll trigger the web search tool when the situation calls for it.


155
00:17:14.045 --> 00:17:27.997
Hai: yeah. And then there are 2 ways to like. This goes for both python people and and Nextjs people. There are 2 ways to do what you would do with the tool after it's been chosen. You could either


156
00:17:29.075 --> 00:17:36.505
Hai: choose like either. Just look at the result as it is, because right now, what happens is, it's gonna like, just give you like


157
00:17:36.625 --> 00:17:53.194
Hai: the weather tool, as like, hey? Based on our conversation. I have chosen this tool, but using a wrapper library like the AI SDK, allows you to execute the tool as well. So before you had to like, parse it and say, okay. So because it chose


158
00:17:53.335 --> 00:18:04.504
Hai: web search, I have to run this function. But here you have a callback that you can pass in here. So let's say, your web search tool is tivili. This is where you pass in your tivili function.


159
00:18:04.925 --> 00:18:12.304
Hai: and then it'll get executed on the front end or the back end depending on like, what kind of application you're building?


160
00:18:13.245 --> 00:18:20.715
Hai: And yeah. And then it gets more complicated than that. So so far


161
00:18:20.945 --> 00:18:25.154
Hai: does do any of these things make sense to you guys on like a high level


162
00:18:25.435 --> 00:18:26.705
Hai: terms of tool calling.


163
00:18:26.945 --> 00:18:28.694
Hai: If you have questions just ask me right now.


164
00:18:29.295 --> 00:18:34.415
Sagar: So generally. In the prompt itself we specify right like.


165
00:18:34.725 --> 00:18:43.904
Sagar: If you want to use this, if you if you want to fetch weather. Then use this tool, or something like that. Is that not the case? Here?


166
00:18:44.855 --> 00:18:53.844
Hai: Yeah, you should absolutely do that. You should actually do that in multiple places. And speaking from experience. So you have the system message.


167
00:18:54.085 --> 00:19:08.385
Hai: That's why you should say it. You should say that you have access to these 5, 10 different tools. Each one does. XYZ. And then you specify again in the description, and then you specify again in the parameters. So the parameters would be like, Okay, like, if


168
00:19:08.715 --> 00:19:11.834
Hai: Xyz is available, then you got to insert that.


169
00:19:12.015 --> 00:19:26.105
Hai: So the parameter goes inside of the function. Right? Like function has arguments. Those are just parameters. Yeah. So you have to specify a couple of different places. So the system message, and then the description of the tool.


170
00:19:26.465 --> 00:19:30.864
Hai: and then, in the description of the tool, feel free to give it examples


171
00:19:31.075 --> 00:19:35.675
Hai: colloquially. We call this a few shot, even though it's not technically


172
00:19:35.975 --> 00:19:41.305
Hai: fine-tuning or pre-training. Few shots just mean, like, you know, you give it. You give the a model like


173
00:19:41.845 --> 00:19:48.014
Hai: a couple of different examples, so that it knows when to do something better.


174
00:19:50.435 --> 00:19:51.944
Hai: How does that sound Sagar?


175
00:19:52.255 --> 00:20:08.885
Sagar: Yep, yep, I was also wondering. Is this the like similar to AI SDK? Is is this provision also available through any other frameworks, or like through open AI's SDK itself. Do? Can we do that as well


176
00:20:09.315 --> 00:20:14.464
Hai: Yeah, so it gets a little bit more complicated than that. And I'll explain it right here.


177
00:20:14.725 --> 00:20:17.325
Hai: Everybody gather around. Let me explain this.


178
00:20:17.865 --> 00:20:23.415
Hai: Okay, we got the Lm tool calling is an Llm thing.


179
00:20:23.755 --> 00:20:30.045
Hai: The infrastructure around it, like the AI SDK is just the software engineering stuff around it to make your life easier.


180
00:20:30.275 --> 00:20:35.635
Hai: So the Lm should be fine tune.


181
00:20:36.615 --> 00:20:41.705
Hai: Hold on, new tool. How do I? What's the best way to do this? Actually?


182
00:20:43.365 --> 00:20:44.905
Hai: Let's see.


183
00:20:47.855 --> 00:20:52.824
Hai: I know I have sticky notes in here. Let me try find. Oh, there, there they are, sticky


184
00:20:52.935 --> 00:20:54.244
Hai: boom. There you go.


185
00:20:55.065 --> 00:20:57.284
Hai: Okay, we got. We got Lms.


186
00:20:58.165 --> 00:21:06.015
Hai: so has to be fine-tuned to use tools, otherwise low performance.


187
00:21:06.375 --> 00:21:15.174
Hai: And we see this from models like Gpt-three. So Gpt-three was able to use tools, quote unquote, but it was terrible at it.


188
00:21:15.435 --> 00:21:21.185
Hai: like you have to tell it like 20 times when to use what, in order for it to be able to pick the right tool


189
00:21:21.635 --> 00:21:51.444
Hai: later, stage models like starting with Gpt-four. And this is actually the reason why Gpt-four kind of kickstart the whole agent stuff back in 2023 like before Gpt-four. Like, it's just really hard to build agents. Gpt-four was sort of fine-tuned to to be able to use tools when given the opportunity to use tools, and it was able to like pick tools based on, like the situation of the conversation, very situationally.


190
00:21:52.224 --> 00:22:01.804
Hai: So this is a very Llm. Thing like we haven't talked about the software part yet, and this is not AI SDK, not like Llm. Not not anything like that.


191
00:22:02.015 --> 00:22:13.814
Hai: If you have an Llm. And if you just run it on your computer and you tell it like, Oh, there are tools you can use. It can do this as long as you prompt it, really? Well, and that's why


192
00:22:14.535 --> 00:22:21.465
Hai: sdks like, or libraries like libraries like Langchain.


193
00:22:21.855 --> 00:22:36.265
Hai: AI SDK I don't know if Lm. Does this, but I know but pydantic AI, or you know, Openai agents, SDK, they all have built in prompts


194
00:22:37.945 --> 00:22:40.905
Hai: built in proms for tool use.


195
00:22:41.635 --> 00:22:44.114
Hai: The reason for that. This is because


196
00:22:44.905 --> 00:23:07.235
Hai: if you were to go and try to prompt a model to use tool today, you're not going to get that great of an experience compared to somebody who has been doing this for a while. And this is the same reason why libraries like Langchain was created, which is because there are patterns that have been repeated over and over. So people just kind of build a library around it. And then.


197
00:23:07.325 --> 00:23:31.804
Hai: now you just have this pattern that you can just plug in. So whenever you declare a tool in Langchain, there's a whole set of problems behind that that says you are blah blah, you can use this tool and blah blah blah, but you have to click through a bunch of stuff to see it, because it's in the library's code. It's not visible to you all, you see, as a user of Langchain or as a user of AI SDK, all you see is that, oh, I can just


198
00:23:31.915 --> 00:23:33.405
Hai: put like a little like


199
00:23:33.565 --> 00:23:40.024
Hai: tool thing here, and they'll just work. But there's like a whole bunch of like hidden prompts behind it.


200
00:23:40.145 --> 00:23:52.225
Hai: And this is all like prompting stuff, and you'll see like, you know, if you pass in a super small model, it'll do terribly, and you pass in a more modern and recent model like Gpt. 4. 0, it will do really well.


201
00:23:53.495 --> 00:23:59.914
Hai: because it's the same prompts behind the scenes. But then is the model smart enough to even use tool that kind of stuff. So


202
00:24:00.295 --> 00:24:09.005
Hai: if you end up using like any of the frontier models today, and you use like a library like AI SDK, or lightly Lm, or Langchain.


203
00:24:09.265 --> 00:24:12.804
Hai: you'll likely you you had like, like


204
00:24:13.105 --> 00:24:16.365
Hai: the probably the most consistent experience with like


205
00:24:16.575 --> 00:24:29.814
Hai: using tools, you'll be fine, basically, unless you're trying to push the boundaries and like, give it like a bunch of tools. Or your use case is like kind of niche. Then you might need to like optimize stuff here and there. But


206
00:24:30.215 --> 00:24:47.545
Hai: yeah, so that's that's the behind the scenes. So you need an Llm that knows how to call tools. You need a set of like infrastructure software infrastructure around it so that it can, like, you know, create tools and in a clean code way. And then, like potentially be able to execute it in a clean way.


207
00:24:47.805 --> 00:25:02.744
Hai: That's why we use these SDK, so that you know, this could have been like 20, not 25 times more amount of code if you don't use like a library like this to set up these tool calling stuff. Yes, I hope that makes sense. Why, you know.


208
00:25:02.915 --> 00:25:08.604
Hai: AI SDK, and stuff like that exist, and why they work with tool calling. And all these things


209
00:25:10.095 --> 00:25:22.014
Frederick Z: Hey? Hi! By by any chance. Do you know of any open source? Models that work pretty well? That work like at least semi well with tools, or or for agent


210
00:25:22.405 --> 00:25:39.085
Hai: Yeah. Quan models do really? Well, I know Deep Seat does decently as well anything that's came out recently. They all have like tool calling baked in. Because this is like I said in the beginning, this is the foundation of knowing how to run agents.


211
00:25:39.215 --> 00:25:47.495
Hai: The reason why agents is super useful is because they can interact with applications. And 3rd party external Apis, right all through tool calling.


212
00:25:47.975 --> 00:25:48.875
Hai: But


213
00:25:49.345 --> 00:25:55.234
Hai: I want to like, introduce you guys to this. The other thing as well. Let's go, agent, small agent.


214
00:25:55.845 --> 00:26:17.924
Hai: So there are 2 school of thoughts to this right? There's a school of thought that says, Hey, if we just lay out all the tools to. And if you think about Mcp, Mcp is basically tool calling. By the way, there's a server that has a bunch of tools and a description of when to use these tools, and then your agent is kind of like, oh, I'm reading all these description, and I have this task I need to do. I'll just call the tool that I need.


215
00:26:18.085 --> 00:26:20.394
Hai: That's what this whole Mcp thing is about


216
00:26:21.115 --> 00:26:31.814
Hai: tools. And then your agent goes to the tools, and like, I'll read all this, and I'll run the thing that I need. But there's 2 school thoughts. It's going back to figjam here.


217
00:26:33.735 --> 00:26:39.575
Hai: The tool school of thoughts. You either do tool calling.


218
00:26:40.725 --> 00:26:48.635
Hai: Let's see you either do tool calling or you do code generation.


219
00:26:49.825 --> 00:26:52.955
Hai: So there are a couple of papers that came out


220
00:26:53.465 --> 00:27:02.395
Hai: not recently. There are some that came out recently, but argues that you get better performance when running like


221
00:27:02.555 --> 00:27:11.535
Hai: like the so the end goal, the end goal end goal is to run


222
00:27:12.255 --> 00:27:20.134
Hai: Co to run a process of some kind, maybe like call external Api, or, you know.


223
00:27:20.305 --> 00:27:23.845
Hai: change a front end thing.


224
00:27:24.845 --> 00:27:33.394
Hai: that kind of stuff. So either of these would help you accomplish that. But the more beginner friendly stuff is tool calling.


225
00:27:33.895 --> 00:27:43.824
Hai: And some people argue that, hey? Like, you know, if you allow the model to generate code based on the specs. So the specs is just like, you know the description of like the tools stuff like that.


226
00:27:44.025 --> 00:27:50.684
Hai: You get better performance. So like, instead of writing like, Hey, you have access to Getwether and get stocks.


227
00:27:50.975 --> 00:28:00.114
Hai: It lets them. They let the model write out what get stocks is in python, or they'll let the model write out like, get weather in python.


228
00:28:00.585 --> 00:28:12.574
Hai: And then they argued that because there's more flexibility there, the model can write the right function to call the right endpoint instead of like being, you know, constrained in the function that you wrote for the model.


229
00:28:13.105 --> 00:28:24.964
Hai: But you don't have to worry about this right now. Just know that there are 2 school of thoughts. Out there. One is is, let the model write code in a sandbox, and 2 is, you only have access to these tools and just run either one.


230
00:28:26.575 --> 00:28:27.295
Hai: Yeah.


231
00:28:27.585 --> 00:28:31.005
Hai: But the end goal is always. I need to like, do something.


232
00:28:31.195 --> 00:28:38.184
Hai: And that's why, you know, next week we're going to talk about Asians and Asians require this knowledge for you guys to understand it?


233
00:28:38.822 --> 00:28:42.694
Hai: How does that sound like, does this tool calling make sense to everybody?


234
00:28:44.295 --> 00:28:50.005
Hai: Okay, okay, is anyone using doing tool calling right now in in their projects?


235
00:28:51.155 --> 00:29:07.344
Frederick Z: I am, and I'm using Quinn. I tried using Deep seat, but I think that there's some sort of incompatibility issue with lang graph and deep seat, because when I tried it, it says, like deep seat, does not support tool calling, which I found surprising. But


236
00:29:07.345 --> 00:29:18.505
Hai: Yeah. But did I tell you about like the hidden problems? Langchain is just full of those problems. You gotta like, just click, click, click, click, click, and you'll see like some some like half baked Prom, that doesn't work for deep sea


237
00:29:19.158 --> 00:29:37.454
Frederick Z: I'm going to implement your idea about like inserting like, tool calling prompts in in multiple places. So so there's the system prompt that there's the prompt for the agent and solve it. And you you also said for the description. Can you remind me of real quick where where the description goes


238
00:29:37.685 --> 00:29:46.814
Hai: Yeah. System, message for the for the agent, or like for your Lm, your router, or whatever. And then the description, the name of the tool also needs to be very descriptive.


239
00:29:46.925 --> 00:30:09.244
Hai: For example, if you have a tool that calls your Crm like this is a call it like tool to update contact. And Crm like, that's something has to be very descriptive like that. And then you go to the description. Here you got to be very specific about the tool again, and then you give examples of when to run the tool, and then in the parameters make sure that you know whatever arguments you have for the function


240
00:30:09.425 --> 00:30:16.784
Hai: again, reiterate and like, just say, like, this is when to run it. And then this is how you get the information from the conversation history.


241
00:30:17.275 --> 00:30:24.385
Hai: Yeah. So she's saying, like, just kind of like, repeat yourself in the description and kind of repeat a little bit more in the parameters.


242
00:30:24.595 --> 00:30:27.295
Hai: and, like the system message for the agent


243
00:30:28.805 --> 00:30:31.354
Frederick Z: Okay, cool. Thanks. Thanks. I'm gonna try that.


244
00:30:32.165 --> 00:30:35.935
Hai: Yeah, anyone else.


245
00:30:37.615 --> 00:30:45.775
Hai: I think I saw some nods. People using tool calling. If you want to like, give an example of what you're using it for feel free to unmute yourself and say it.


246
00:30:50.505 --> 00:30:57.985
Hai: Now everyone decides to be shy. Huh! I saw some some nods. I'll point. I'll point you out if you don't


247
00:30:58.595 --> 00:31:04.634
Meri Nova: That's a good idea. Actually feel free to point out put people on the spot. But I could share my use case


248
00:31:06.364 --> 00:31:07.754
Meri Nova: So


249
00:31:08.184 --> 00:31:23.724
Meri Nova: I'm building an agent to research some topic that the user gives. And one of the. So I I'm assuming I'll have 2 tools. One of them is a web search and another one is the writer tool.


250
00:31:23.894 --> 00:31:35.734
Meri Nova: And I'm using openai SDK agents. Actually, after we had a conversation about which which agent framework will last. But so


251
00:31:35.874 --> 00:31:56.994
Meri Nova: it's it's interesting library, actually, because you can use agents as tools as well. But anyway. So the the context is also interesting how you should pass context between those tools as well, because mine depends. The second, the writer technical tool depends on the context of the 1st tool gives me from the web search


252
00:31:58.535 --> 00:31:59.995
Meri Nova: So, yeah, that's the use case.


253
00:32:01.095 --> 00:32:03.854
Hai: Nice. That's a yeah. That's a use case right there.


254
00:32:07.375 --> 00:32:08.625
Hai: Anyone else


255
00:32:14.605 --> 00:32:20.734
Sagar: Honestly, I'm not in the way that you just explained, but I'm kind of making a function call.


256
00:32:21.285 --> 00:32:23.494
Sagar: but I would prefer to make it. Now.


257
00:32:23.885 --> 00:32:26.574
Sagar: the way you explained like instead of like.


258
00:32:26.735 --> 00:32:30.384
Sagar: right now, it's more of like a workflow for me where?


259
00:32:30.745 --> 00:32:35.734
Sagar: So my agent is. Basically reviews. Pull requests.


260
00:32:35.885 --> 00:32:40.584
Sagar: Give some suggestions on the get on the pull request, and then


261
00:32:41.119 --> 00:32:47.275
Sagar: there's another agent which reads through those comments and incorporates those changes automatically into the code.


262
00:32:47.415 --> 00:32:54.304
Sagar: So there's a there. Mostly my tools are revolved around Github Apis, where I would need to


263
00:32:55.051 --> 00:32:58.305
Sagar: fetch some details from the pull request code


264
00:32:58.465 --> 00:33:12.604
Sagar: or some tools would be around getting parsing the code and getting some relevant function or class to get some context or something like around that. So


265
00:33:13.320 --> 00:33:16.975
Sagar: at the moment. It's like a workflow, which is very.


266
00:33:17.505 --> 00:33:20.335
Sagar: very controlled the way I want.


267
00:33:20.890 --> 00:33:33.675
Sagar: It's not like orchestrated as such that, you know. Hey, Llm, call this whenever you need have a need, so there's no con. I feel that it's more of like orchestrated flow, not like


268
00:33:33.675 --> 00:33:36.755
Hai: I wouldn't. I wouldn't change a thing about it. The reason for that is because


269
00:33:37.435 --> 00:33:40.685
Hai: forcing the model to call only one tool is actually a use case.


270
00:33:41.075 --> 00:33:46.865
Hai: And that's why Openai has this thing called force tool calling.


271
00:33:47.025 --> 00:33:51.075
Hai: Because tool calling is like a really great way to


272
00:33:51.355 --> 00:33:59.504
Hai: extract parameters. People realized. If you don't do that, and you say that, hey? Like, I just want it to like


273
00:34:00.475 --> 00:34:19.275
Hai: extract like a list of stuff, and then and then you like heuristically pass those values to like a real function, to call after that it's actually not as performant as like, hey, you have. It's not as performant as telling the model. Hey, you have access to one tool, and this tool takes these arguments.


274
00:34:19.795 --> 00:34:25.335
Hai: find the arguments for me from the from the conversation so


275
00:34:26.165 --> 00:34:29.035
Hai: function calling. That's why they made it so that


276
00:34:29.345 --> 00:34:30.985
Sagar: There's an option so that


277
00:34:31.245 --> 00:34:32.155
Hai: So


278
00:34:32.535 --> 00:34:44.535
Hai: by default. A model from Openai, for example, will not call a tool. If the situation doesn't require it to call a tool, it will actually go, you know, tell you in, in like


279
00:34:44.755 --> 00:34:49.144
Hai: like natural language, just kind of continue the conversation. So, for example.


280
00:34:49.525 --> 00:34:59.864
Hai: you tell it, let you tell it that you have access to like 2 tools. One is, get weather, the other one is stock prices. And then you say, like, what? Who's like the


281
00:35:01.345 --> 00:35:15.044
Hai: 40th President of the United States, and it will actually, like most of the time, for, like a open AI model, it'll just respond back in natural language, just like how you you would otherwise not have any tools given to it.


282
00:35:15.185 --> 00:35:25.105
Hai: But you can have this thing where you can, you know, force a 2 call so that it'll always like, get weather, or always like get stock prices. So if you ask that question.


283
00:35:25.685 --> 00:35:36.855
Hai: it'll actually come up with some weird stuff to like, pass into one of those functions, to like force, a skit weather, or, like force, get stock prices.


284
00:35:37.195 --> 00:35:40.475
Hai: which is, turns out to be very useful in


285
00:35:40.845 --> 00:35:52.565
Hai: real world scenarios, because a lot of times the conversation usually hints towards something and user doesn't really like explicitly ask for it.


286
00:35:52.865 --> 00:35:57.215
Hai: So in cases, like, you know, hey? Like, you know.


287
00:35:57.335 --> 00:36:04.824
Hai: I'm I'm asking the model some questions. I'm asking the the AI some questions, and it doesn't have access to like a bunch of stuff.


288
00:36:04.985 --> 00:36:14.754
Hai: But sometimes models are not smart enough to go online unless you say, now, go online and search for stuff. Then you know, the tool tool hit rate is way higher.


289
00:36:15.185 --> 00:36:17.534
Hai: But sometimes we want the model to be like


290
00:36:18.325 --> 00:36:22.805
Hai: smart enough to know that, hey? Like we're talking in circle here and just go online search for stuff.


291
00:36:22.955 --> 00:36:25.775
Hai: And that's when, like forced tool calling comes in


292
00:36:27.405 --> 00:36:38.534
Hai: and that's why, like, there's some like really interesting patterns where you can do stuff like you have a tool. So you have, like a like a AI Chatbot, or whatever right?


293
00:36:38.695 --> 00:36:44.795
Hai: And then this chat bot has, like web, search tool.


294
00:36:46.455 --> 00:36:47.655
Hai: And then


295
00:36:48.135 --> 00:37:00.335
Hai: what people realize that this is what I do as well is that you can basically let the Chatbot have more normal conversation with you while having a web search tool by wrapping another tool called


296
00:37:00.455 --> 00:37:02.434
Hai: I don't know, conversate.


297
00:37:03.315 --> 00:37:04.975
Hai: And then this would actually like.


298
00:37:05.205 --> 00:37:10.084
Hai: whenever based on the situation of the conversation. What was happening in the messages? History?


299
00:37:10.215 --> 00:37:19.384
Hai: Usually it'll know when to call conversation and just talk like a normal Chatbot, and then, when when to like, call the the web search tool.


300
00:37:19.895 --> 00:37:28.735
Hai: And then there are some models that you can do, web search and then compensate in multiple tools in different steps as well, which, if you want to ask me about it, I can show you


301
00:37:29.885 --> 00:37:35.184
Hai: So this is like apparently more performance than just having the web search tool


302
00:37:36.175 --> 00:37:39.525
Hai: and then force it to like talk when it doesn't need to.


303
00:37:39.945 --> 00:37:45.814
Hai: For whatever reason, like these models are not, you know, we're just trying to figure out what to do with these these models. So


304
00:37:45.985 --> 00:37:51.104
Hai: that is from what I've known like. If you have like this all of a sudden. Now it's like


305
00:37:51.355 --> 00:37:55.005
Hai: good at talking, and also decent at using tools.


306
00:37:55.165 --> 00:37:59.964
Hai: But if you don't have it now, it's like, don't know when to talk and don't know when to use tools.


307
00:38:00.145 --> 00:38:13.945
Hai: So there's a pattern where you like, you can basically constrain whatever the model is trying to do into like tools. So like, if you wanted to talk, you have a talk tool. If you wanted to web search, have a web search tool, and if we want it to like.


308
00:38:14.225 --> 00:38:16.364
Hai: I don't know, reiterate, or like


309
00:38:16.775 --> 00:38:21.295
Hai: talk to a certain way. You have another tool, so you can even have stuff like, you know.


310
00:38:21.555 --> 00:38:29.155
Hai: conversate. And then, you know, conversate like a pirate or something.


311
00:38:29.675 --> 00:38:37.095
Hai: So I think, basically like tool calling just means that, hey? Like you are allowed to do these things


312
00:38:37.715 --> 00:38:41.585
Hai: do the thing, do the right thing at the right time, basically.


313
00:38:42.045 --> 00:38:47.444
Hai: And yeah, I hope this isn't doesn't confuse you guys too much.


314
00:38:50.025 --> 00:38:52.985
Hai: Okay, Oren's like nodding. So I guess this is very confusing.


315
00:38:56.565 --> 00:38:58.953
Hai: Just a little bit confusing. Okay, cool.


316
00:38:59.955 --> 00:39:05.614
Hai: yeah. So cold calling gets pretty deep. We'll talk more about it in in like our agent stuff next week.


317
00:39:05.815 --> 00:39:10.435
Hai: and I know some of you guys are already doing tool calling so cigar like I wouldn't change a thing about it.


318
00:39:10.815 --> 00:39:13.154
Hai: but about your workflow, because


319
00:39:13.285 --> 00:39:24.074
Hai: if it's supposed to be a workflow, then it's supposed to be a workflow. Don't make it like chain of thought and stuff, and then it will quote the wrong tools. And then you have, like the worst performing workflow.


320
00:39:24.265 --> 00:39:26.004
Hai: I mean, that's just my 2 cents


321
00:39:26.375 --> 00:39:26.915
Sagar: Yep.


322
00:39:28.295 --> 00:39:33.055
Hai: Okay structure upwards. Anyone wants to take a jab. At this


323
00:39:41.645 --> 00:39:44.304
Hai: I saw Duane unmuting, and then muted himself again.


324
00:39:44.925 --> 00:39:46.194
Hai: This man changed his mind


325
00:39:46.445 --> 00:39:49.685
Dwayne Joseph: I was gonna say, oh, go ahead! Go ahead!


326
00:39:49.865 --> 00:39:51.496
Athira Praveen: Oh, sorry I was


327
00:39:52.538 --> 00:40:12.544
Athira Praveen: thinking about the tool calling again, and had a quick question. So is the just to reiterate is the goal of having these tools is to have constraints around what the Lm can do like, give it guard guardrails to what it can do rather than, for example, in my project, it's to retrieve


328
00:40:12.785 --> 00:40:25.604
Athira Praveen: information right? So instead of just giving it to Aist, can be like, Oh, retrieve all this for me. I say that you are this, and you can retrieve so and so information based on this and this. So I have a tool around that.


329
00:40:25.835 --> 00:40:26.955
Athira Praveen: except that


330
00:40:27.715 --> 00:40:33.444
Hai: Pretty much. And then if your AI needs to do something else, you just wrap that inside another tool


331
00:40:33.555 --> 00:40:36.574
Athira Praveen: Yeah, another tool could be like an Lm call


332
00:40:37.725 --> 00:40:42.904
Hai: Like it could be like just a generate text call like this


333
00:40:43.105 --> 00:40:51.065
Hai: with like a no tools. And just like, here's the message's history, and just continue the conversation. The tool can be called, continue the conversation.


334
00:40:51.315 --> 00:40:57.995
Hai: and now it cannot do anything outside of like these 2 things, which is a great thing to do with tool calling


335
00:40:58.968 --> 00:41:11.864
Hai: and you're absolutely right. People use tool calling to do gut rails as well. I do that as well. Tool calling is just a way to like force, the model to be like, constrained into doing certain things, and not anything outside of that


336
00:41:12.165 --> 00:41:20.434
Hai: which is great, because then I can always have a tool in my router. So my router is kind of like, basically an Lm call that says, like, you have


337
00:41:20.635 --> 00:41:23.074
Hai: a couple of options to continue the conversation.


338
00:41:23.345 --> 00:41:27.854
Hai: and one of one of my tools would be to reject the user's request.


339
00:41:28.055 --> 00:41:33.755
Hai: And then I have a description for that that says like, Hey, we should find this tool when the user is asking about something inappropriate.


340
00:41:34.075 --> 00:41:50.455
Hai: then that supposedly like make it more performant when it sees like a request that comes in that is not appropriate, and then it will actually choose the tool as opposed to like. Try to reject that by sending back like, hey? As an AI. Oh, I can't do that, or whatever


341
00:41:51.077 --> 00:41:55.524
Hai: in that sense you can always also control what what you send back.


342
00:41:55.985 --> 00:41:58.605
Hai: And then there's a pattern where you can say like.


343
00:41:58.935 --> 00:42:25.775
Hai: I can wrap these. I can wrap canned responses in tools as well. So if you have like a line that you always tell people when they're doing something inappropriate. You can wrap that like you can hard code that into a string and then wrap that inside a tool that says respond to inappropriate requests so that you can say, like somebody says something inappropriate. They'll run that tool, and then you'll always send back like a particular response that you yourself have chosen


344
00:42:26.065 --> 00:42:37.735
Hai: like, because sometimes you don't want it to say like as an AI right, sometimes you want it to say like, Oh, you should contact administrator, or whatever. So that's now under your control, right?


345
00:42:38.365 --> 00:42:40.034
Athira Praveen: That makes sense. Thank you.


346
00:42:40.235 --> 00:42:40.785
Hai: Yeah.


347
00:42:41.185 --> 00:42:46.444
Hai: Okay, Dwayne, you wanna do Json mode real quick or structure output


348
00:42:48.715 --> 00:43:02.164
Dwayne Joseph: by the name of it. I was gonna kind of guess that the output so it's a way to make sure that the output that the model gives you is in a specific structure or specific format that was, gonna do my guess


349
00:43:02.625 --> 00:43:08.915
Hai: Pretty much even though we have the table like this. But structure outputs predate tool calling


350
00:43:09.235 --> 00:43:19.344
Hai: because we had structure outputs, which is, you know, if you if you tell like a model, hey? Like Return Json, so that you know Json is more friendly to your database format


351
00:43:20.285 --> 00:43:26.545
Hai: back in like 2023, 2022. It was really hard to do that. The model would like return


352
00:43:26.785 --> 00:43:37.635
Hai: Broken Json with, like, you know, maybe maybe it's missing like a curly bracket at the end. Or maybe, like properties are wrong stuff like that. But nowadays most frontier models can do this really well.


353
00:43:38.015 --> 00:43:50.234
Hai: Structure outputs just mean, hey? If you want to give me Json, so that it's now structured data for me to use in my either calling the next function or saving this data into my database.


354
00:43:50.945 --> 00:43:53.444
Hai: That's pretty much it. The structure outputs


355
00:43:55.285 --> 00:43:56.975
Hai: If you use something like Langchain


356
00:43:57.805 --> 00:44:06.594
Hai: again, there's a hidden prompt inside of like the land chain structured output.


357
00:44:07.975 --> 00:44:09.004
Hai: Function.


358
00:44:10.395 --> 00:44:13.744
Hai: Oh, hold on, let me find the latest one.


359
00:44:17.105 --> 00:44:22.955
Hai: Yeah. So this right here with structure output. There's like a promise behind that. That says


360
00:44:23.655 --> 00:44:29.175
Hai: you are a Json expert, or whatever like. You only return, Json, and then say that 10 times.


361
00:44:29.395 --> 00:44:31.745
Hai: and then hope that the model will actually do that.


362
00:44:33.505 --> 00:44:35.435
Hai: There's a problem with, like, you know.


363
00:44:35.735 --> 00:44:41.575
Hai: getting them trying to get the model to return a structured output, like, you know, kind of a json like this.


364
00:44:41.875 --> 00:45:03.885
Hai: or Json like this, and it always returns like, sometimes I return with with that like this curly bracket here, or something wrong, maybe, like a missing quote right here. So what we what some companies do is that they introduced fine-tuned models, models that are fine-tuned to just do Json. So Openai has one. Gemini has one.


365
00:45:03.965 --> 00:45:17.985
Hai: So when I say Gemini, I mean, if you go to Google AI studio and then you're trying to like run a query. What you can do is you can go to the side panel here, as you can see, they call it function calling, but it's actually tool calling


366
00:45:18.647 --> 00:45:20.054
Hai: just the same thing.


367
00:45:20.505 --> 00:45:25.285
Hai: But structure output right here, so you can turn this on, and then you can edit it.


368
00:45:25.745 --> 00:45:30.705
Hai: Usually you want to give it like a some sort of schema, so that you can follow.


369
00:45:30.835 --> 00:45:40.735
Hai: So, for example, if you want the output to be like, I want it to look like this, and then you know these properties, these keys are, you know.


370
00:45:41.448 --> 00:45:43.264
Hai: what is Orin laughing about


371
00:45:45.185 --> 00:45:48.485
Oren: I was struggling with the structured outputs for 2 days now


372
00:45:48.975 --> 00:45:51.254
Hai: I wanted to realize it's right there.


373
00:45:51.745 --> 00:45:53.275
Hai: What? Which model are you using


374
00:45:53.875 --> 00:45:54.935
Oren: And terminate


375
00:45:55.505 --> 00:45:58.664
Hai: Dave and I, okay, so did you. Did you give it a schema?


376
00:45:59.015 --> 00:46:05.225
Oren: Not yet, but I was walking on it like half an hour before we started this, and I'm gonna walk on it now.


377
00:46:05.675 --> 00:46:14.704
Hai: Ok. So the easiest way to do a schema here is you can code out your Json here, but I'm severely dyslexic, so I don't know when to tap stuff.


378
00:46:14.805 --> 00:46:35.944
Hai: So what I do is I usually go to the visual editor, and now I can like start adding properties. So, for example, if your use case, like, I'm looking at businesses from my web search, I need to. So I'm scraping a website. And then I need just the structure output of like the business like, you know, business, name, business, id whatever. So I can type it out like this business name.


379
00:46:36.055 --> 00:46:44.984
Hai: There should be a string, and then you can mark something as required or not required. So mark that was required, and then maybe, like business address


380
00:46:45.695 --> 00:46:51.784
Hai: optional. And then, now, if I go back to this, I get a pretty pretty nice


381
00:46:52.285 --> 00:46:53.745
Hai: Json schema.


382
00:46:54.055 --> 00:47:00.504
Hai: So this is basically tells the model, especially the fine-tuned models from from Openai or Gemini


383
00:47:00.765 --> 00:47:05.035
Hai: that hey? This is the the format that I want at the end, like you need to follow this.


384
00:47:05.385 --> 00:47:11.035
Hai: and then, if you don't follow this, you will be fined 200 bucks that that might actually work in the prong.


385
00:47:11.205 --> 00:47:19.655
Hai: Try that. But yeah. So the model will look at this and be like, okay, I'll try my best to generate something that adheres to this kind of schema.


386
00:47:20.545 --> 00:47:36.185
Hai: So easiest way to do it through Gemini is to go on Google AI studio. Click, click, click, right here, type some stuff. And then, you know, you have a Json thing here. Openai has a better thing. And this is what I ran into in my hackathon. I gotta tell you guys


387
00:47:36.345 --> 00:47:41.394
Hai: so what I was doing. The hackathon does anyone here try like the project that I built.


388
00:47:44.145 --> 00:47:45.395
Hai: I know some people did.


389
00:47:45.725 --> 00:48:03.134
Hai: But the tool, basically. What it does is it looks at a code base, and then it tries to generate a bunch of steps on how to recreate a feature from that code base. So that's basically a structured output problem. I want a list of objects


390
00:48:03.395 --> 00:48:10.115
Hai: from an input string, which is basically the entire code base concatenated into one big string.


391
00:48:10.415 --> 00:48:12.394
Hai: So I try to use Gemini.


392
00:48:12.495 --> 00:48:36.685
Hai: And what happened was because the code input was so long that by the time it tries to generate the Json it always generated without like missing stuff. And then it turns out that Json, at the end was broken. It couldn't be parsed by regular code. So that's the key. If the Json couldn't be parsed by regular code at the end. That means the Json is broken, and you need to like, refine how you do structure output.


393
00:48:36.995 --> 00:48:42.825
Hai: So what I did was, I knew that Openai has this thing called strict mode, which means that


394
00:48:43.075 --> 00:48:46.735
Hai: so they advertise this mode as


395
00:48:47.095 --> 00:48:49.894
Hai: you get Json 100% of the time guaranteed.


396
00:48:51.155 --> 00:48:52.704
Hai: Strict mode.


397
00:48:54.205 --> 00:48:58.975
Hai: So, for example, we have a similar situation here where we declare like, you know.


398
00:48:59.085 --> 00:49:07.115
Hai: So we have a tool here, and then we declare it like the schema for stuff. And then actually, this is just tool calling a lot.


399
00:49:07.555 --> 00:49:09.185
Hai: and it's strip me out


400
00:49:12.345 --> 00:49:17.865
Hai: strict, strict, strict. There we go, so strict mode.


401
00:49:18.025 --> 00:49:20.945
Hai: So we we do we still declare like a you know.


402
00:49:21.135 --> 00:49:25.534
Hai: like a Json object, kind of like how we what we saw in Gemini.


403
00:49:25.925 --> 00:49:34.564
Hai: but in Openai their Api has this thing called strict, which means that it will guarantee that a valid Json will get sent back to you


404
00:49:35.025 --> 00:49:36.254
Hai: 100% of the time.


405
00:49:37.085 --> 00:49:57.294
Hai: If I'll get into the caveats of that, but you guys probably won't see it. But this makes our lives much easier, because then you don't have to like catch errors for Json, which is ridiculous, right like sometimes it's missing this, sometimes it's missing that, and then the whole thing breaks. But here you can always rely on it.


406
00:49:57.705 --> 00:50:06.545
Hai: providing you a Json. Now, if the Json is valid or not, I mean the Json is useful or not. That's another story. But you always get a json that doesn't break your code


407
00:50:06.665 --> 00:50:08.475
Hai: using this thing called strict mode.


408
00:50:09.547 --> 00:50:11.714
Hai: So, for example.


409
00:50:12.015 --> 00:50:27.455
Hai: so the caveat of this is that it's slower. So it takes about twice the amount of time to generate, and the reason for that is because when you turn on streak mode, your request is now hitting a different Api.


410
00:50:27.545 --> 00:50:50.305
Hai: And this Api has both a fine tune model that does Json and some heuristic code to kind of like error and backtrack and all that stuff so that your Json will come out to you always valid. So if you want like, you know, kind of worry, free Json schema structure output, you could always look at strict mode right here.


411
00:50:50.635 --> 00:51:00.155
Hai: If you disable streak mode, it's faster. But then there's a there's a 10% chance that it'll be broken, but if you turn on streak mode it will always be valid.


412
00:51:00.833 --> 00:51:03.824
Hai: If you, for example, for Gemini.


413
00:51:04.525 --> 00:51:08.725
Hai: if I were to stick with Gemini for my hackathon project. I would have to


414
00:51:09.035 --> 00:51:14.394
Hai: just coat, just, you know, regular coat right here, kind of like like this.


415
00:51:14.505 --> 00:51:25.255
Hai: you know. Run the call to Gemini. Blah blah! Get the json. But then at the end I have to like check whether or not it's a valid Json, and if it's not a valid Json, I have to take that error message


416
00:51:25.455 --> 00:51:31.424
Hai: and then type it right back to the model to be like, Hey, fix this, and then hopefully, the second time around it will be able to fix it.


417
00:51:32.805 --> 00:51:40.745
Hai: Yeah. So how does that sound for everybody? This is structured output use cases. Use cases.


418
00:51:41.875 --> 00:51:57.565
Hai: it's just scraping a website and trying to find like, if the website has like 10 businesses on it. And you don't want this string format because you can't save that to your database you can do structure, output to be like, hey, I want all this to be a list, and each item in a list is an object.


419
00:51:58.105 --> 00:52:20.780
Hai: Now you have a clean list to like, say, to save to your database instead of like one long website, I've been scraped. So that's 1. Another thing is, you know, you're parsing long documents, and you're like, Oh, I'm just looking for like this particular information piece of information, or I'm just looking for like 3 key information. And you know, you can create a schema that says something like


420
00:52:26.765 --> 00:52:34.494
Hai: address, maybe like somebody sent you like an email. And you just wanted the the email address.


421
00:52:35.635 --> 00:52:41.354
Hai: And then you want, like, you know, I don't know. This is kind of like reaching but actionable items.


422
00:52:42.075 --> 00:52:51.265
Hai: and this could be like an array of string or something like that. Then, you know, you would have an easier time parsing it if it comes back as Json.


423
00:52:51.805 --> 00:53:01.865
Hai: and the the whole idea of like a structure output is that it's very friendly to your code. After the Llm. Llm. Puts out like text and free form, text and stuff like that. But it's not very


424
00:53:02.085 --> 00:53:09.085
Hai: code friendly, but if it's structure output, then it's very friendly to the next step you want to do in your in your pipeline, or whatever


425
00:53:11.815 --> 00:53:16.514
Meri Nova: It's it's like responses. Api and Openai doesn't have the strict mode


426
00:53:19.155 --> 00:53:22.125
Hai: Oh, that's like the new Api from them, right


427
00:53:22.125 --> 00:53:31.905
Meri Nova: Yeah. So because I had the similar issue. But I was curious. By the way, what do you think about the difference between using base model from Pydantic and just the Json format


428
00:53:35.215 --> 00:53:36.305
Hai: Base model


429
00:53:36.475 --> 00:53:44.565
Hai: you can. So pydantic is just a way to declare a schema. So the same way you would do with like a typescript interface or a zot schema


430
00:53:45.825 --> 00:53:50.904
Hai: The reason why some libraries allow you to use pydantic to like


431
00:53:51.115 --> 00:53:56.295
Hai: declare a schema like this is because it gets converted to this before it hits the model.


432
00:53:56.555 --> 00:54:01.495
Hai: Pydentic is just for you. It's for your developer experience.


433
00:54:01.685 --> 00:54:07.445
Hai: If you're a python dev, you would rather be writing hydantic classes as opposed to like writing this


434
00:54:07.655 --> 00:54:19.545
Hai: stupid like Json. And you know how many like, you know, you have to know when to tap, which is like the thing that I hate the most like. How many taps is right like there's like 4 or 5 right like, unless you have like


435
00:54:20.455 --> 00:54:25.604
Hai: es lint, or whatever, or like prettier, you wouldn't be able to tell. But if you have


436
00:54:26.125 --> 00:54:44.084
Hai: base model from like Pydantic, then you can just create a class, for like like this could be a class right? Parameters could be a class in Pydantic. And then in here, instead of declaring like a vomit here, you just say equals to parameter class, and that would be so much nicer than.


437
00:54:44.625 --> 00:54:50.965
Hai: And then the parameter class could be reused somewhere else. So like the reason why we use zod and typescript


438
00:54:51.345 --> 00:54:54.864
Hai: and and pydantic is because we can.


439
00:54:55.445 --> 00:55:00.295
Hai: The code looks nicer. You can reuse those classes in different schemas.


440
00:55:01.315 --> 00:55:10.195
Hai: This is basically like hard coding stuff, right? But this is what the model sees. Your pydantic pydantic class will be converted to this before it hits the model


441
00:55:11.535 --> 00:55:18.145
Meri Nova: I thought they got popular because they're more performant or something. I don't know why people, I guess it's just the developer experience. Then


442
00:55:18.145 --> 00:55:26.535
Hai: Model doesn't know what the I mean. The model knows what a Pydentic class is, but, like the Api endpoint requires you to hit it with a Json like this


443
00:55:28.095 --> 00:55:29.635
Meri Nova: Cool. Got it?


444
00:55:30.535 --> 00:55:38.824
Athira Praveen: And do you have to use tool calling to get a structured response like structured output response? Or can we do it without tool


445
00:55:39.245 --> 00:55:43.584
Hai: You can do tool calling with that structure output. You can do tool calling


446
00:55:43.945 --> 00:55:47.744
Athira Praveen: No, no, sorry the other way, like I want a structured output. But do I need to


447
00:55:47.745 --> 00:55:58.924
Hai: Oh, yeah, you can use structure. You can do structure output with that tool calling. So you can have like a basically like a conversation with an AI and be like you just every time I ask you something. You just kind of respond with a Json, and it would do that for you


448
00:56:00.135 --> 00:56:04.144
Athira Praveen: Okay. So this is, I can bake this structure into my prompt


449
00:56:05.045 --> 00:56:12.305
Hai: Yeah, you should. But if you hit Openai models, you send that as part of your schema.


450
00:56:12.535 --> 00:56:16.629
Hai: So that would be like something like


451
00:56:17.675 --> 00:56:19.874
Hai: Let me see if I can find an example here


452
00:56:20.225 --> 00:56:33.175
Sagar: I have shared an example in the chat. That's exactly. I was also going to ask you like, it's for getting structured output, I was able to use the prompt itself to


453
00:56:33.445 --> 00:56:36.924
Sagar: get me the desired format from the Llm.


454
00:56:38.885 --> 00:56:39.855
Hai: Yeah, so, usually.


455
00:56:40.615 --> 00:56:45.818
Athira Praveen: I am doing that right now, but I feel like there are like my, it's


456
00:56:46.385 --> 00:56:52.334
Athira Praveen: There are issues and how it's getting parsed into my database, and I feel like it's probably something to do with


457
00:56:52.575 --> 00:56:55.304
Athira Praveen: my output response number


458
00:56:55.305 --> 00:57:19.445
Hai: 2 places you have to do it. 1st is in the system message, and the second is in like whatever the property that the Api allows you to pass in the schema. So let me try to find if the schema for because when you hit Openai, or if you're using AI SDK like. There's a schema property that you can pass in which gets passed through to Openai, or to whatever model provider


459
00:57:21.255 --> 00:57:23.025
Hai: So you need to find that.


460
00:57:24.665 --> 00:57:28.255
Hai: Oh, do do


461
00:57:32.345 --> 00:57:39.135
Hai: let's see if I can find it. So it usually comes with like, the Oh, it's it's called generate object. That's what's called


462
00:57:40.045 --> 00:57:42.335
Hai: generate object.


463
00:57:42.605 --> 00:57:43.335
Hai: Yeah.


464
00:57:44.565 --> 00:57:46.355
Hai: Yeah. So usually.


465
00:57:46.745 --> 00:57:54.975
Hai: if you hit the Openai SDK directly, there's also a schema property. If you hit it through AI SDK, there's a schema property.


466
00:57:55.575 --> 00:58:01.244
Hai: and then you can pass your schema in here, which is usually a Json or zot schema.


467
00:58:01.995 --> 00:58:08.364
Hai: and then, if you want better performance, you say the whole schema again in your, in your.


468
00:58:08.945 --> 00:58:10.214
Hai: in your prompt.


469
00:58:10.455 --> 00:58:12.814
Hai: It says from here. But you can have a system message.


470
00:58:12.985 --> 00:58:19.095
Hai: So basically, you want to kind of like reiterate that you want this particular format.


471
00:58:21.235 --> 00:58:21.804
Hai: I wonder


472
00:58:21.805 --> 00:58:24.854
Athira Praveen: In the, in the schema property, and in the prompt right here


473
00:58:24.855 --> 00:58:49.605
Hai: Pretty much like just same thing with like function calling. So you just kind of it knows that there are these functions you can call. But then you also want to like tell it again. And this is very anecdotally like I do that. But then again, I don't know. I actually don't know if I take that out, it'll still work as just just as well. But I think I put that in for for this particular reason, which is like it wasn't doing well. So I had to like kind of repeat.


474
00:58:50.175 --> 00:58:54.524
Hai: when why use what and what format in the system message.


475
00:58:54.715 --> 00:58:57.515
Hai: even though I have it in these correct properties


476
00:58:59.019 --> 00:59:06.475
Athira Praveen: And my schema here is basically like the database schema. Right? So I have to put that in a Json format. Okay.


477
00:59:06.475 --> 00:59:10.525
Hai: Yeah, depends on what you're trying to do. Like trying to save it to a database. Yeah. So it's gonna be like


478
00:59:11.095 --> 00:59:13.895
Hai: all the fields of the columns, and you know


479
00:59:14.125 --> 00:59:14.675
Athira Praveen: Yep.


480
00:59:14.675 --> 00:59:19.965
Hai: What? What like, whether it's string or integer and stuff like that for each. So


481
00:59:20.095 --> 00:59:21.374
Hai: yeah, that's a good question.


482
00:59:22.045 --> 00:59:22.785
Athira Praveen: Okay.


483
00:59:23.305 --> 00:59:39.394
Sagar: Yeah, I am wondering, given that I've been using prompt template for a while. And I've been also retrieving a structured response very consistently. So I'm just wondering why different approaches. And why not?


484
00:59:39.625 --> 00:59:46.044
Sagar: A singular approach like which one to choose? Then I'm I'm now little puzzled right now.


485
00:59:46.975 --> 00:59:49.434
Hai: You're getting good performance and don't change anything


486
00:59:50.275 --> 00:59:50.955
Sagar: Okay.


487
00:59:51.145 --> 00:59:56.835
Hai: Yeah, if if you don't, then now, we're going to enter the territory of experimentation.


488
00:59:57.535 --> 00:59:59.480
Hai: that's the name of the game.


489
01:00:00.105 --> 01:00:03.475
Hai: that's why we have like prompt optimization library stuff.


490
01:00:04.255 --> 01:00:07.975
Hai: Because if it works like the that's amazing.


491
01:00:08.465 --> 01:00:15.925
Hai: Like, keep keep keep doing that. If it doesn't work, then there are a couple options you have.


492
01:00:17.475 --> 01:00:20.595
Hai: Yeah, I wouldn't add more stuff if if it's already working


493
01:00:24.395 --> 01:00:31.355
Hai: anyways. You guys want to stick around, I'll maybe I'll set up


494
01:00:31.535 --> 01:00:35.195
Hai: some tool calling and structured output after the call.


495
01:00:36.905 --> 01:00:42.375
Hai: And when I say after the call, I mean like, now, if you want to stick around, stick around for that, if not


496
01:00:42.885 --> 01:00:44.155
Hai: feel free to leave.


497
01:00:48.405 --> 01:00:49.835
Hai: Yeah, how's that sound?


498
01:00:53.245 --> 01:00:57.564
Hai: Okay, cool. Actually, before we before we end the lecture.


499
01:00:58.085 --> 01:01:02.084
Hai: let's go back to figma I want. I want you guys to populate the


500
01:01:02.235 --> 01:01:06.995
Hai: what's the tool calling and structure output table from what you learned today.


501
01:01:07.425 --> 01:01:12.035
Hai: And if you know more than your classmates feel free to put stuff in there, because


502
01:01:12.475 --> 01:01:14.615
Hai: everyone's trying to learn so


503
01:01:18.155 --> 01:01:22.744
Meri Nova: This is so cool that we can write in the same environment. I just love this


504
01:01:26.595 --> 01:01:28.915
Hai: Is this her 1st time doing remote work, Mary?


505
01:01:29.935 --> 01:01:35.594
Hai: I really hate this stuff. By the way, like when I pull up slack or like figma. I get anxiety


506
01:01:36.055 --> 01:01:36.630
Meri Nova: Why?


507
01:01:38.135 --> 01:01:39.375
Hai: Brings back memories.


508
01:01:47.695 --> 01:01:51.205
Hai: That guardrail piece for a tool calling is such a hidden gem.


509
01:02:21.535 --> 01:02:24.564
Hai: Well, while you guys are doing that, keep doing that


510
01:02:25.585 --> 01:02:33.035
Hai: I'm gonna pull up the code for for stuff.


511
01:02:35.775 --> 01:02:38.754
Hai: Oh, this is my hackathon project. So funny


512
01:02:39.685 --> 01:02:41.474
Meri Nova: Are you gonna open? Source? It?


513
01:02:43.860 --> 01:02:46.079
Hai: I might, I might.


514
01:02:50.005 --> 01:02:51.495
Hai: I'm trying to think what to do with it


515
01:02:52.135 --> 01:03:05.065
Hai: like. So a bunch of Vcs like reached out after my presentation. But after my pitch, and they were like, Oh, I need this stuff like 2 weeks ago, me and the team was trying to like copy some features from like a very popular open source project. So I'm like.


516
01:03:05.395 --> 01:03:06.775
Hai: let's chat. Let's chat.


517
01:03:14.415 --> 01:03:24.474
Hai: And like, was, it was difficult, because this is like a this is like a developer tool, right? So half of the half the Vcs in the room were like non-technical. So I had to really dumb it down.


518
01:03:26.645 --> 01:03:33.794
Hai: So I just say, like, Oh, you know, when your team is like team of developers is like trying to like replicate a feature from somewhere else. And


519
01:03:34.825 --> 01:03:39.565
Hai: you can reduce that time from like 7 days to like one day, because this will just tell you what to replicate.


520
01:03:39.945 --> 01:03:43.585
Hai: And then half of them were like somewhat technical. So that was easier.


521
01:03:44.765 --> 01:03:46.015
Hai: We'll put the circle right here.


522
01:03:49.005 --> 01:03:55.005
Hai: But yeah, oh, did I? Did I delete somebody's circle? Was it supposed to be there


523
01:03:56.395 --> 01:03:58.711
Hai: if it wasn't my apologies.


524
01:03:59.435 --> 01:04:03.055
Hai: anyways, I'm gonna pull up the but the


525
01:04:04.915 --> 01:04:06.985
Ekta: I had. I had a question


526
01:04:07.255 --> 01:04:07.875
Hai: Yep.


527
01:04:07.875 --> 01:04:25.664
Ekta: Just thinking about a use case in my project, and maybe I can reiterate that, and you can correct me if I'm thinking the right way. So let's say, I have multiple sources to call or like cross referencing multiple Apis so that I'm using and


528
01:04:26.535 --> 01:04:28.994
Ekta: to calling. Calling. I want this


529
01:04:28.995 --> 01:04:29.535
Hai: Yes.


530
01:04:29.535 --> 01:04:35.079
Ekta: Application to be called for certain topic, and not for, like something like that.


531
01:04:35.475 --> 01:04:45.954
Hai: And the team at Weev. 8 calls it agentic rag. So you basically, you wrap the source of knowledge inside of a tool. And then you tell it when to call the source of knowledge


532
01:04:49.065 --> 01:04:51.234
Ekta: So it's a it's a known pattern, so


533
01:04:56.365 --> 01:04:58.014
Ekta: like I can give it a


534
01:04:58.485 --> 01:05:03.975
Ekta: structured query with Json like abstract title,


535
01:05:05.094 --> 01:05:10.174
Hai: You just gotta tell it the structure it is for your arguments or your parameters.


536
01:05:13.374 --> 01:05:17.094
Hai: Where's the getting started? Repo?


537
01:05:19.134 --> 01:05:20.114
Hai: Try and find it?


538
01:05:21.844 --> 01:05:23.394
Hai: Is it this one? No.


539
01:05:23.844 --> 01:05:28.504
Meri Nova: What was there getting started? The couch task, the vibe


540
01:05:29.485 --> 01:05:39.104
Hai: Like the the very 1st repo that I made like in the 1st lecture, where I set up like light. Lm, and AI SDK


541
01:05:39.105 --> 01:05:42.254
Meri Nova: On your own workshop repo actually


542
01:05:42.264 --> 01:05:42.564
Hai: Oh,


543
01:05:47.685 --> 01:05:49.285
Meri Nova: Their booking.


544
01:05:49.285 --> 01:05:50.075
Hai: Here.


545
01:05:51.665 --> 01:05:52.475
Hai: Okay?


546
01:05:52.975 --> 01:05:54.684
Hai: And if I have it on my computer


547
01:05:58.485 --> 01:06:11.095
Hai: and then AI workshop. Yay, okay. So we got this. I'm gonna Bootcam. AI SDK, no Bootcam, I think


548
01:06:12.525 --> 01:06:13.475
Hai: he


549
01:06:17.235 --> 01:06:18.085
Hai: can start.


550
01:06:18.875 --> 01:06:19.634
Hai: Boom.


551
01:06:21.705 --> 01:06:24.115
Hai: Okay, no, it's not it.


552
01:06:24.344 --> 01:06:26.115
Hai: Where am I? Where am I right now?


553
01:06:28.634 --> 01:06:31.325
Hai: Well, my word, now. Oh, I have 2 files. Okay.


554
01:06:31.535 --> 01:06:33.615
Hai: Now, now, it starts to come back to me.


555
01:06:34.985 --> 01:06:41.575
Hai: Okay, we pulled out this starter code and then we're gonna do some stuff.


556
01:06:45.565 --> 01:06:48.205
Hai: I'm glad I had this. So I don't have to like set up everything again.


557
01:06:49.175 --> 01:06:51.024
Hai: Okay, zoom in real quick.


558
01:06:55.585 --> 01:07:03.555
Hai: Okay, so this is like, very quick. AI SDK like, write a short poem.


559
01:07:04.205 --> 01:07:10.344
Hai: So instead of doing this, what we're gonna do is we're gonna set up a function to


560
01:07:10.885 --> 01:07:21.344
Hai: wonder if I should do tool calling or structure output. So tool calling is basically structure output. It's a structured output of the name of the function. And then the arguments that go into the function.


561
01:07:22.755 --> 01:07:27.415
Hai: So let's do structure output. First, st because that predates tool calling.


562
01:07:28.435 --> 01:07:33.884
Hai: So let me pull up the documentation for AI SDK right here.


563
01:07:35.295 --> 01:07:42.664
Hai: So when you're using the AI SDK. There are many ways to generate stuff.


564
01:07:43.695 --> 01:07:51.564
Hai: When you want to generate text, you call the generate text method from the AI SDK library like this


565
01:07:51.765 --> 01:07:56.575
Hai: when you want to. When you want to do just structured outputs, you, do you use generate object.


566
01:07:58.705 --> 01:08:00.475
Hai: So we're, this is what we're gonna be using.


567
01:08:01.425 --> 01:08:05.055
Hai: So I'm going to do this. Go back here.


568
01:08:05.325 --> 01:08:10.535
Hai: We got generate text. But okay, cool.


569
01:08:11.465 --> 01:08:16.950
Hai: But what I want to do is I want to create another file here. Perhaps I call this


570
01:08:18.305 --> 01:08:26.835
Hai: structured output example, dot js, because this is a Javascript repo. For whatever reason.


571
01:08:31.505 --> 01:08:34.725
Hai: my brother in Christ, you made the repo.


572
01:08:35.245 --> 01:08:36.594
Hai: I made the repo.


573
01:08:37.175 --> 01:08:38.355
Hai: Okay, so


574
01:08:39.015 --> 01:08:51.045
Hai: to do structured outputs, you can do like the regular Json stuff, which is very ugly, right? But you can in Nextjs or in typescript or Javascript. You can use this library called Zod.


575
01:08:51.195 --> 01:08:55.984
Hai: Does anyone here is using the zaw right now or no. Okay. I see one hand.


576
01:08:56.345 --> 01:09:04.765
Hai: Duane, you're just checking your head. Will make your life easier, and cursor is also very familiar with zod, so


577
01:09:05.265 --> 01:09:09.424
Hai: this is how you would create a schema in that.


578
01:09:09.735 --> 01:09:21.705
Hai: It's very clean. If you were to do this in like straight straight Json, then it's going to be ballooned, and then you can't reuse some of the schemas in different schemas


579
01:09:21.875 --> 01:09:26.785
Hai: so uses. Aw, that's what I'm trying to say. It's recommended by Openai. All that stuff.


580
01:09:27.625 --> 01:09:32.405
Hai: So we're going to be doing this. So I guess we're going to import zod as well.


581
01:09:33.095 --> 01:09:35.443
Hai: And then we're just gonna say


582
01:09:38.185 --> 01:09:40.814
Hai: I guess I need a schema first.st


583
01:09:41.566 --> 01:09:47.443
Hai: What am I trying to do? So my input, my input would be something like,


584
01:09:48.775 --> 01:09:53.595
Hai: a website or something or website.


585
01:09:54.615 --> 01:09:55.685
Hai: HTML,


586
01:09:56.135 --> 01:10:05.664
Hai: see? It works with HTML. And like Markdown, and all that stuff, too. If you're passing HTML, and you're trying to get like structured output, it usually works with a strong enough model


587
01:10:06.780 --> 01:10:11.639
Hai: and then the output I wanted to be. I wanted to find


588
01:10:12.605 --> 01:10:17.625
Hai: I want to figure out what website I want to extract first, st


589
01:10:18.195 --> 01:10:22.625
Hai: do you guys have a website that you wanna like, extract information from


590
01:10:27.285 --> 01:10:33.194
Oren: Hey? I'm trying to extract a to scrape a lot of recipes, so maybe fuse.com, or something


591
01:10:34.075 --> 01:10:35.465
Hai: You call it serious? Eat


592
01:10:35.845 --> 01:10:36.465
Oren: Yeah.


593
01:10:39.575 --> 01:10:41.622
Hai: So we're gonna pick


594
01:10:46.825 --> 01:10:49.984
Hai: I like how they don't just give me like a recipe.


595
01:10:50.545 --> 01:10:51.995
Hai: None of this is recipes


596
01:10:53.455 --> 01:10:55.735
Hai: recipe. Oh, there you go, recipe. Oh.


597
01:10:56.155 --> 01:10:58.535
Hai: there are so many things to choose.


598
01:11:02.175 --> 01:11:03.365
Hai: This one looks nice.


599
01:11:03.745 --> 01:11:12.885
Hai: Okay, let's say we want this. And the quick and dirty way is that I want to. Let's just pretend we have a tool to script the web


600
01:11:13.035 --> 01:11:19.834
Hai: we don't have it built in, so I'm just going to go to file, crawl, and which is a web scraping tool. And I'm just going to paste the thing in.


601
01:11:20.085 --> 01:11:28.924
Hai: And then what I'm going to do is I'm going to get the markdown content back. Or I think I promised you guys. HTML, so I'm actually going to do that


602
01:11:29.655 --> 01:11:32.945
Hai: include HTML content. There you go run again.


603
01:11:35.785 --> 01:11:45.615
Hai: So I'm going to hit that website. It's going to bring back both the Markdown and the HTML. So this HTML, it's incredibly dense, incredibly long.


604
01:11:45.955 --> 01:11:51.155
Hai: But with with a good enough model we can definitely get the response back.


605
01:11:51.825 --> 01:11:58.385
Hai: I'm gonna copy that. And then I'm gonna make new file here. And I'm gonna say, recipe


606
01:12:00.885 --> 01:12:04.565
Hai: data or something like that recipe recipe.


607
01:12:05.805 --> 01:12:07.284
Hai: Okay, so


608
01:12:07.955 --> 01:12:15.385
Hai: and I'm going to say this. And then I'm going to give it a basically a string. I want it to be


609
01:12:15.535 --> 01:12:24.844
Hai: so. I use the string literal so that I can kind of do this. Why, if you use quotes, it will not do that for you.


610
01:12:25.095 --> 01:12:30.245
Hai: This is basically the website. So I'm going to save it in this, in here. It's called recipe.


611
01:12:30.815 --> 01:12:34.694
Hai: Bring it back in here. So the input would be


612
01:12:35.615 --> 01:12:46.244
Hai: this, basically. So I'll say, import recipe from I'm gonna say.


613
01:12:46.555 --> 01:12:49.864
Hai: dot slash recipe. Thank you very much.


614
01:12:50.725 --> 01:12:56.995
Hai: And then the output of this. What I want it to look like is I want


615
01:12:57.535 --> 01:13:01.435
Hai: probably. Let me scroll down to the steps.


616
01:13:03.905 --> 01:13:12.015
Hai: maybe ingredients, and then directions, directions could be a list of string. Each step is a string.


617
01:13:12.715 --> 01:13:22.324
Hai: And then, okay, you know what I'm gonna this is the part where you use


618
01:13:22.675 --> 01:13:25.664
Hai: cursor because I don't want to type all this stuff.


619
01:13:25.925 --> 01:13:27.815
Hai: So I'm gonna pull up cursor and be like


620
01:13:28.155 --> 01:13:35.425
Hai: yo make me a zot schema for recipe.


621
01:13:37.745 --> 01:13:51.654
Hai: I need the following fields required, and then I need ingredients list of string.


622
01:13:51.775 --> 01:13:58.275
Hai: I need a steps list of string.


623
01:13:58.895 --> 01:14:04.699
Hai: and I need maybe like time, and then I need


624
01:14:05.635 --> 01:14:09.665
Hai: Time would just be like seconds.


625
01:14:10.775 --> 01:14:12.145
Hai: and this would be a number.


626
01:14:12.455 --> 01:14:17.210
Hai: and then I need maybe something like


627
01:14:22.085 --> 01:14:24.995
Hai: Where else what else would would I care about when I make this?


628
01:14:35.573 --> 01:14:37.787
Hai: It's historical significance.


629
01:14:40.075 --> 01:14:44.994
Hai: Why like, why? Why was someone? Why was why should someone make this?


630
01:14:46.315 --> 01:14:51.625
Hai: And because we're dealing with AI, we're just gonna let it know so that it can kind of bake that in


631
01:14:52.755 --> 01:14:55.274
Oren: Maybe we can make like an effort level


632
01:14:56.185 --> 01:14:56.545
Hai: No.


633
01:14:56.545 --> 01:14:59.065
Oren: So difficulty, or something


634
01:14:59.065 --> 01:15:09.325
Hai: Okay, I like that. It's actually I don't know if it's in here, which is a good kind of example to see if okay it does. Maybe it couldn't find anything like what is it going to do? And we can maybe


635
01:15:09.325 --> 01:15:12.264
Oren: Like the amount of ingredients or the amount of time.


636
01:15:12.515 --> 01:15:14.464
Oren: Some sort of a combination, maybe


637
01:15:14.995 --> 01:15:15.625
Hai: Yeah.


638
01:15:15.855 --> 01:15:23.965
Hai: But I do want to see this, because I want to see like, okay, so how is it going to deal with not being able to find information from the text.


639
01:15:25.075 --> 01:15:31.555
Hai: Okay. So we got the zot schema for recipe here, and then


640
01:15:32.235 --> 01:15:41.004
Hai: we have to delete this, because if if it's the field is required and it doesn't pass anything in. That's when our code breaks.


641
01:15:41.675 --> 01:15:55.194
Hai: That's when. Actually, no, that's not when our code breaks. That's when the the AI provider will send back an error and be like yo. We couldn't generate anything because there was one field that was required, but we couldn't do anything about it.


642
01:15:55.685 --> 01:15:59.055
Hai: So sen.


643
01:16:02.345 --> 01:16:05.955
Hai: So just a quick look at my setup. I got 3.7 sonnet


644
01:16:09.345 --> 01:16:18.614
Sagar: While it's working a quick question. Hi, for your hackathon. How did you manage to afford the tokenization cost? For while reading huge port bases.


645
01:16:20.915 --> 01:16:29.364
Sagar: I mean, you like even reading one project. It would have costed you so did you made any optimizations while


646
01:16:29.585 --> 01:16:32.005
Sagar: reading those code bases or


647
01:16:32.615 --> 01:16:37.094
Hai: Yeah, I use this tool called repo Repo Max. And there's a


648
01:16:37.255 --> 01:16:41.005
Hai: there's a flag that you can enable where you can compress the


649
01:16:41.355 --> 01:16:46.875
Hai: the structure of the code without it losing its its like relationship. For some reason.


650
01:16:47.175 --> 01:16:48.945
Hai: I think, for example, you


651
01:16:49.105 --> 01:16:59.485
Hai: what it does, it basically treats certain functions unless they are significant and used a lot. It treats certain functions as like an abstract function. So it takes. Basically it keeps the


652
01:16:59.585 --> 01:17:05.734
Hai: it keeps the function name and the parameters and the return output, and just leave everything in the middle blank.


653
01:17:06.595 --> 01:17:11.074
Hai: so like you almost like treat it as like. No, there's no implementation, but you kind of know when to use it.


654
01:17:11.365 --> 01:17:19.284
Hai: So there's compressed mode. And also I, somebody. A lot of people use this. I burn like $17 like overnight.


655
01:17:19.565 --> 01:17:20.465
Sagar: So.


656
01:17:20.685 --> 01:17:23.379
Hai: I don't think I I don't think


657
01:17:23.965 --> 01:17:28.235
Sagar: But which tool? Sorry to interrupt you. Which tool did you mention? The name


658
01:17:28.535 --> 01:17:31.454
Hai: It's called Rebo Max.


659
01:17:32.005 --> 01:17:33.905
Hai: Let me pull, mix my bad.


660
01:17:34.165 --> 01:17:42.464
Hai: Okay, you can use this locally to like, just run it against your code base. And now you get like a markdown on pretty much all the stuff in your code. Base


661
01:17:43.085 --> 01:17:43.995
Sagar: Thank you.


662
01:17:43.995 --> 01:17:49.125
Hai: Yep, anyways, going back to this, we got the recipe schema.


663
01:17:49.645 --> 01:17:54.535
Hai: which looks fine. We're not. We're not here yet, delete this except


664
01:17:55.145 --> 01:18:00.194
Hai: recipe schema. Okay? So we're going to go back to our documentation here.


665
01:18:00.545 --> 01:18:07.935
Hai: So what I'm seeing here is I'm seeing a constant result here. And then this is an asynchronous function. So we have to await it.


666
01:18:08.045 --> 01:18:09.855
Hai: So I'm just going to copy this right here.


667
01:18:11.455 --> 01:18:19.984
Hai: Go down here. And I'm just going to say, Okay, so I need to pass something into this generate object function.


668
01:18:20.275 --> 01:18:26.344
Hai: So what goes in here? What goes in here? Okay, we've got to pass in the model. So 1st go passing the model


669
01:18:26.805 --> 01:18:34.015
Hai: model, I'm gonna say, Gpt, 4. 0, spurn some money.


670
01:18:34.815 --> 01:18:38.165
Hai: And then what do you want? Oh.


671
01:18:39.765 --> 01:18:43.334
Hai: it's supposed to be an object, my guys, there you go


672
01:18:46.678 --> 01:18:53.984
Hai: model. And then I think next thing is default, object, generation mode. Json.


673
01:18:54.445 --> 01:19:01.364
Hai: Okay, so since this is open, AI, and I just told you guys about strict mode. I wonder if I can pass in strict in here?


674
01:19:02.145 --> 01:19:06.885
Hai: Yes, I can can't wait.


675
01:19:07.455 --> 01:19:08.545
Hai: Let's see.


676
01:19:10.675 --> 01:19:15.204
Hai: Let me actually look that up. I don't know if that's true. I don't know if my linter is working well, so


677
01:19:15.915 --> 01:19:23.315
Hai: let me just double check and see if strict mode goes in there, or should I look up.


678
01:19:23.735 --> 01:19:31.804
Hai: generate object here because we were in the documentation for testing, which is different?


679
01:19:33.325 --> 01:19:37.874
Hai: Okay, schema goes into this. So Schema goes into the Schema property.


680
01:19:38.165 --> 01:19:40.075
Hai: And I hope you guys watch me do this.


681
01:19:40.513 --> 01:19:48.205
Hai: Because I'm like looking at documentation. I don't have know these things off top of my head right? So you can. You can totally do what I'm just doing right now


682
01:19:48.585 --> 01:19:49.575
Hai: and then


683
01:19:49.725 --> 01:19:56.395
Hai: you'll get there if you feel like, oh, there's a lot of stuff like, look at me. I'm just literally just reading the docs and trying one step at a time.


684
01:19:56.725 --> 01:20:02.145
Hai: So, Schema, we're passing the recipe schema over here, which we've declared with Zod.


685
01:20:02.355 --> 01:20:06.495
Hai: if you want to write zart by hand, use AI. It's pretty straightforward.


686
01:20:06.975 --> 01:20:14.165
Hai: And then the prompt goes down here. So I wonder if I can find the strict mode in here. So.


687
01:20:14.375 --> 01:20:20.335
Hai: as you see, whenever I have a question about something, I'm usually just looking in through the documentation and see if I can find it.


688
01:20:21.095 --> 01:20:25.265
Hai: So I type in strict. And down here I see structure output from Openai.


689
01:20:26.927 --> 01:20:35.864
Hai: Structured output. True. Okay, okay, okay.


690
01:20:36.965 --> 01:20:41.905
Hai: To do. Pdf support predicted outputs.


691
01:20:42.005 --> 01:20:48.075
Hai: Okay? So all it's saying here is that it says, as long as I have the structure outputs to true. Here


692
01:20:48.425 --> 01:20:49.885
Hai: I'll be fine.


693
01:20:51.645 --> 01:20:52.814
Hai: Which is not true.


694
01:20:52.955 --> 01:20:56.154
Hai: and I'm going to cheat a little bit because I looked at this during my hackathon.


695
01:20:56.815 --> 01:21:02.004
Hai: There's a property that I can pass in to get truly truly strict mode.


696
01:21:02.165 --> 01:21:07.495
Hai: So here let me pull up my hackathon project real quick, strict.


697
01:21:08.805 --> 01:21:09.724
Hai: There we go.


698
01:21:12.065 --> 01:21:16.095
Hai: So this also uses the AI SDK and


699
01:21:17.125 --> 01:21:23.335
Hai: I have to declare a strict mode in the open. AI's model client, basically.


700
01:21:23.905 --> 01:21:33.074
Hai: So I can't. I can't do that in the generate. Let me pull up the other code again. I can't do it in the generate object method from AI SDK. I have to do it


701
01:21:33.305 --> 01:21:34.725
Hai: earlier in that.


702
01:21:35.255 --> 01:21:39.734
Hai: So I have to do it when I when I create the open AI like model object.


703
01:21:40.273 --> 01:21:48.225
Hai: So let me scroll up here real quick. Create open AI from AI SDK slash openai. Okay? So I need that


704
01:21:48.895 --> 01:21:50.725
Hai: gonna pass that in here.


705
01:21:51.225 --> 01:21:53.944
Hai: I don't know if I install this, though. Let's see.


706
01:21:56.335 --> 01:21:58.594
Hai: there's no way for me to know that's great.


707
01:22:00.128 --> 01:22:01.455
Hai: And then


708
01:22:01.795 --> 01:22:06.545
Hai: let's see where I use this. Go down to where I use it, and then I have to do this.


709
01:22:07.845 --> 01:22:11.925
Hai: So there's a property called compatibility.


710
01:22:13.915 --> 01:22:19.574
Hai: And then I had to pass in the key. Strict here. The value strict here to this key.


711
01:22:20.195 --> 01:22:25.505
Hai: So that's how you get strict mode in Openai when you're using Openai, I mean using AI SDK


712
01:22:25.995 --> 01:22:29.185
Hai: very hard to find. But now, you know.


713
01:22:29.405 --> 01:22:38.976
Hai: because I did find this when I was doing it. Okay, so going back to this, now, we're we're pretty much good to go.


714
01:22:40.925 --> 01:22:45.845
Hai: I don't know if we can still need to pass instructor output. True, did I do it here?


715
01:22:46.435 --> 01:22:49.644
Hai: I don't think so, and it worked fine, so


716
01:22:50.015 --> 01:22:51.495
Athira Praveen: Don't we need the prompt


717
01:22:52.195 --> 01:23:00.354
Hai: Yes, we need to prompt. I'm trying to see if I need to like, you know. Do like the thing that the documentation says. It says, like structure. Output's true.


718
01:23:00.685 --> 01:23:02.254
Hai: So it seems like I don't have to


719
01:23:03.125 --> 01:23:06.044
Hai: when I have my strict mode enabled.


720
01:23:07.283 --> 01:23:11.755
Hai: Yeah. So the prompt, the prompt is


721
01:23:13.115 --> 01:23:15.774
Hai: well. The AI has already written the prompt for me, which is great.


722
01:23:16.435 --> 01:23:22.235
Hai: Extract the following, let's extract the recipe information from the provider. HTML.


723
01:23:22.515 --> 01:23:25.315
Hai: Return a structure in Json, with


724
01:23:25.605 --> 01:23:36.435
Hai: looks great looks great, and the HTML here does not exist. So we're going to have to like figure out how to pass that in. But we already have that right here. Let's go recipe.


725
01:23:37.045 --> 01:23:40.415
Hai: So we got recipe here beside here.


726
01:23:40.645 --> 01:23:45.735
Hai: Okay? Why, the heck, is it doing this? Okay, okay.


727
01:23:45.845 --> 01:23:51.754
Hai: I don't know why it's like format like this. That's funny. But this is basically our our website. So it's good.


728
01:23:53.085 --> 01:23:58.765
Hai: We haven't all right. So that being said.


729
01:23:59.465 --> 01:24:07.485
Hai: we have the schema passed in. We have a prompt here that tells it to extract some stuff, and


730
01:24:07.625 --> 01:24:12.834
Hai: we've got strict mode on, and I'll do one with that strict mode on so that you guys can see what it looks like.


731
01:24:14.095 --> 01:24:19.685
Hai: And yeah, thank you. AI,


732
01:24:20.875 --> 01:24:22.544
Hai: that's pretty much it. Let's find it.


733
01:24:23.085 --> 01:24:24.344
Hai: Go to my terminal.


734
01:24:25.425 --> 01:24:43.575
Hai: And then this is in Boot Camp AI SDK, so I'm just gonna see the in boot camp. AI SDK, and I think I just have to do a node and then structured output. I think last time I ran this I need to add some stuff in the beginning, so let me see if I need that.


735
01:24:43.965 --> 01:24:47.356
Hai: So here we have the


736
01:24:48.495 --> 01:24:49.944
Hai: Actually, I don't need to do anything


737
01:24:50.605 --> 01:24:54.874
Hai: that's great, but I do need. I do need to do this. I remember from last time, because


738
01:24:55.405 --> 01:24:59.365
Hai: because we're running this script on its own, it needs to load like the


739
01:25:00.165 --> 01:25:05.485
Hai: the virtual and the environment variables which contains the open Api key.


740
01:25:05.735 --> 01:25:10.414
Hai: If we don't do this, we didn't. We didn't have it last time, so I think we'd struggle with that for a little bit.


741
01:25:11.287 --> 01:25:14.635
Hai: Other than that, I think we're good to go.


742
01:25:14.795 --> 01:25:22.055
Hai: Yeah, save. And then I'm going to run this. And something's gonna happen. Obviously.


743
01:25:22.235 --> 01:25:27.414
Hai: it says, cannot find package. AI imported from blah. Blah, blah blah.


744
01:25:27.945 --> 01:25:33.705
Hai: Well, why is that? Oh, because it's a new computer. I didn't Pnpm install.


745
01:25:34.745 --> 01:25:35.665
Hai: Psych


746
01:25:36.075 --> 01:25:41.075
Hai: it's almost like there's always some stuff that is just in the way, right? Always. It's the nature of the job.


747
01:25:41.585 --> 01:25:44.894
Hai: And then I do this for 4 HA day, and I get pissed by the end.


748
01:25:45.525 --> 01:25:47.435
Hai: I need to go like blow some steam.


749
01:25:47.815 --> 01:25:56.704
Hai: Okay, so Pnpmi boom done. Now we got the note modules. Now we know we've installed some stuff. Here.


750
01:25:57.775 --> 01:26:01.374
Hai: run this again, please. Of course something else happens.


751
01:26:01.645 --> 01:26:07.254
Hai: We need. Zod, we don't have. Zod, it's it's 9 30. Just


752
01:26:07.755 --> 01:26:11.094
Hai: AI. I don't know. Like, I don't do.


753
01:26:11.505 --> 01:26:17.085
Hai: Yeah. One day we will have this bigger app for us. Oh, we have an error. Let me just do that for you real quick.


754
01:26:17.335 --> 01:26:18.574
Hai: I'll fix that for you.


755
01:26:19.155 --> 01:26:20.685
Hai: What else? What else do we need?


756
01:26:21.249 --> 01:26:32.964
Hai: Oh, yeah, okay. So because we're running this as a script we need. And we didn't specify in our packagejson. This is supposed to be a module. I believe that's why we need to basically


757
01:26:33.545 --> 01:26:45.715
Hai: do this. And if you're using next nextjs, you don't have to worry about any of this stuff, because when you instantiate a project in next, everything is just taken care of for you. Typescript types, everything. Typescript config.


758
01:26:46.165 --> 01:26:47.705
Hai: all that stuff easy.


759
01:26:48.665 --> 01:26:56.965
Hai: What else do we need to do here? I will not touch this code base ever again. I'm going to pull up like Nextjs next time, because this is just wasting my time.


760
01:26:58.245 --> 01:27:02.895
Hai: But what else require is not defined es module scope you can use.


761
01:27:03.975 --> 01:27:05.965
Hai: I was trying to accommodate.


762
01:27:06.485 --> 01:27:10.655
Hai: I was trying to accommodate import. Thank you. There you go.


763
01:27:11.145 --> 01:27:12.384
Hai: Do I need this?


764
01:27:12.505 --> 01:27:17.844
Hai: Maybe I do run. Okay, something else happened.


765
01:27:18.015 --> 01:27:21.804
Hai: Model does not have a default. Object generation mode.


766
01:27:22.065 --> 01:27:26.394
Hai: Okay? What do you mean by that? Oh, we have to pass this in.


767
01:27:27.095 --> 01:27:28.195
Hai: It's dim.


768
01:27:29.195 --> 01:27:30.185
Hai: There you go.


769
01:27:31.185 --> 01:27:35.915
Hai: I believe that's that's how it's supposed to work. There we go. Yeah, perfect.


770
01:27:38.775 --> 01:27:50.665
Hai: Ron. Okay, what else got on? Swear to God. We module type.


771
01:27:50.885 --> 01:27:58.075
Hai: It's not specified. And it doesn't parse as common. Js, which file is this


772
01:27:58.865 --> 01:28:05.664
Hai: structured output example? Okay, reparsing as es module, because


773
01:28:06.035 --> 01:28:09.065
Hai: model does not have a default object. No, wait!


774
01:28:10.225 --> 01:28:12.005
Hai: This is a old hold on.


775
01:28:16.275 --> 01:28:17.205
Hai: Hmm!


776
01:28:18.135 --> 01:28:19.784
Hai: This happens again. What? The heck?


777
01:28:20.145 --> 01:28:23.764
Hai: I thought I passed something in open the eye right here. What are you talking about?


778
01:28:23.875 --> 01:28:26.685
Hai: Oh, I need to. I need to give it a model name, I think.


779
01:28:28.925 --> 01:28:34.204
Hai: Okay, let me pull up my hackathon code again. Where do I declare it? Oh, there we go!


780
01:28:34.505 --> 01:28:41.844
Hai: That's different. So Openai object goes into provider options. Okay, okay.


781
01:28:42.925 --> 01:28:46.524
Hai: no, actually, that's not true. Let me backtrack that real quick.


782
01:28:47.927 --> 01:28:52.165
Hai: This goes where this goes where


783
01:28:57.895 --> 01:29:06.285
Hai: model model is supposed supposed to be. Oh, the model is when you use this to wrap the name.


784
01:29:06.475 --> 01:29:17.354
Hai: My God, okay. So I need a model right here, and the model is for Gpt. For linking


785
01:29:18.515 --> 01:29:24.905
Hai: and then pass the model down here. I can't just pass the open AI object down there, all right.


786
01:29:25.945 --> 01:29:27.055
Hai: What else?


787
01:29:28.225 --> 01:29:30.474
Hai: Openai Api key is missing.


788
01:29:31.415 --> 01:29:33.844
Hai: Bro, that's why I have the freaking thing here.


789
01:29:37.535 --> 01:29:38.575
Hai: Okay.


790
01:29:40.575 --> 01:29:45.265
Hai: And so I knew index. Dot. Js worked. I knew that from last time.


791
01:29:45.885 --> 01:29:51.885
Hai: So what did I do in here? That was different like other than this.


792
01:29:52.015 --> 01:29:54.644
Hai: can I just have this in here? I think so.


793
01:29:56.455 --> 01:29:57.755
Hai: I think so.


794
01:29:58.635 --> 01:30:05.164
Hai: But it's like, No, what's happening here, Chad, does anyone know?


795
01:30:08.285 --> 01:30:14.215
Hai: Okay, this doesn't parse as a common Js module.


796
01:30:14.875 --> 01:30:18.815
Hai: Well, then, why does this parse as a common Js module? I didn't do anything different.


797
01:30:24.345 --> 01:30:26.495
Hai: let me think for a sec.


798
01:30:27.655 --> 01:30:30.165
Hai: Oh, I think I think I know why


799
01:30:31.115 --> 01:30:34.775
Hai: we all use require here, but in here we use like regular


800
01:30:35.045 --> 01:30:40.095
Hai: stuff, which is not what we're supposed to do. I don't got time to change all this. I'm just gonna say, like


801
01:30:40.585 --> 01:30:44.715
Hai: use. Require here for me, please.


802
01:30:46.615 --> 01:30:49.534
Hai: Thank you very much. Looks about right?


803
01:30:51.525 --> 01:30:54.055
Hai: It's like ticking back 20 years.


804
01:30:54.835 --> 01:30:57.935
Hai: Oh, it requires other.


805
01:30:58.595 --> 01:30:59.815
Hai: What do you mean?


806
01:31:00.535 --> 01:31:03.475
Hai: I thought, this is what you wanted. Okay.


807
01:31:04.060 --> 01:31:07.165
Hai: then go in here and see this real quick.


808
01:31:17.985 --> 01:31:23.794
Hai: honestly, honestly, I'm gonna pass this to AI. Don't want to deal with this right now.


809
01:31:25.715 --> 01:31:31.064
Hai: So if you're on Nextjs, you don't have to think about what I'm doing right now, because this is just a script running on its own.


810
01:31:34.545 --> 01:31:38.205
Hai: So now we're we're gonna let AI deal with this stuff


811
01:31:39.805 --> 01:31:41.615
Meri Nova: So what was the problem?


812
01:31:42.355 --> 01:31:51.205
Hai: So the problem is, this is running as a script in node, and I don't remember if I declared the configuration for it to be an es module or not.


813
01:31:52.225 --> 01:31:56.025
Hai: and I'm too lazy to find out right now, because it's 9 30. So Christmas


814
01:31:56.025 --> 01:31:56.905
Hai: is going to help me.


815
01:31:59.055 --> 01:32:02.615
Hai: Okay, also, if it's bringing back the import statements.


816
01:32:04.635 --> 01:32:07.855
Hai: I don't know if that's how it's supposed to work.


817
01:32:11.095 --> 01:32:16.414
Hai: But then, when we add the type module to the package. Sdsm, the other file is probably not going to work.


818
01:32:16.895 --> 01:32:19.714
Hai: but we can try that.


819
01:32:20.785 --> 01:32:24.995
Hai: So we have web. Add type module to package a Json.


820
01:32:25.325 --> 01:32:30.404
Hai: Now it's it's treated as an es module, so that can do like the modern type Javascript stuff


821
01:32:30.885 --> 01:32:33.224
Hai: instead of this, like backwards


822
01:32:33.225 --> 01:32:40.334
Meri Nova: Where do I hide? Do you give like context more than that file? Can you give, like the entire folder.


823
01:32:40.535 --> 01:32:42.285
Meri Nova: the context of the agent


824
01:32:42.425 --> 01:32:44.844
Hai: Yep, you can drag a a full folder in.


825
01:32:47.545 --> 01:32:49.965
Hai: Okay, no need to run this.


826
01:32:50.815 --> 01:32:54.435
Hai: I will just. I will just accept whatever you just wrote.


827
01:32:55.455 --> 01:33:00.874
Hai: So what it changed was the type module which is the configuration silliness


828
01:33:01.435 --> 01:33:04.725
Hai: that has consequences. But whatever we'll accept that.


829
01:33:04.975 --> 01:33:11.674
Hai: and then here we just switch it back to import statements here, so that because now this is treated as an es module.


830
01:33:12.125 --> 01:33:13.694
Hai: so let me run this again.


831
01:33:14.295 --> 01:33:15.175
Hai: Swear to God.


832
01:33:15.905 --> 01:33:17.985
Hai: What, what?


833
01:33:19.195 --> 01:33:25.355
Hai: Oh, do I not? Oh, this is a new computer. What am I keep thinking? I don't have a dot envy file in here. Chat.


834
01:33:26.202 --> 01:33:30.274
Hai: My brain is so cooked right now. Okay, dot envy.


835
01:33:32.745 --> 01:33:40.664
Hai: it's like the error message is accurate, and I'm like, no, you don't know what you're talking about. I don't know what I'm talking about.


836
01:33:40.895 --> 01:33:41.555
Hai: Hey?


837
01:33:44.235 --> 01:33:47.624
Hai: Mary, are you seeing me having a a mental breakdown online?


838
01:33:47.625 --> 01:33:49.924
Meri Nova: Yeah, I'm actually laughing behind the mute


839
01:33:49.925 --> 01:33:51.504
Hai: Oh, it's still on. Okay. Cool.


840
01:33:52.235 --> 01:33:54.814
Hai: Get me my Api key real quick.


841
01:33:56.495 --> 01:34:03.795
Hai: Api key starter boot camp boot camp 2.


842
01:34:06.215 --> 01:34:09.174
Hai: Create secret key copy.


843
01:34:09.285 --> 01:34:10.655
Hai: Go down here.


844
01:34:10.965 --> 01:34:19.465
Hai: The Api key equals to this string. Right here. Close, run it again.


845
01:34:20.235 --> 01:34:23.914
Hai: Yay, no, God!


846
01:34:24.045 --> 01:34:26.174
Hai: What? What? What is it this time.


847
01:34:28.065 --> 01:34:33.314
Hai: Oh, okay, I see this model. Maximum context is 28,000 tokens.


848
01:34:33.815 --> 01:34:36.737
Hai: a hundred 37,000 tokens.


849
01:34:38.375 --> 01:34:43.325
Hai: okay, so we gotta find another recipe my guy. It's too much


850
01:34:43.325 --> 01:34:46.573
Oren: Let's do. Let's see it. I'll give you something


851
01:34:48.115 --> 01:34:53.294
Hai: Actually, before we do that, let me. I have second thoughts. I have second thoughts here.


852
01:34:53.535 --> 01:34:56.006
Hai: Okay, now we can. Now we can continue.


853
01:34:56.525 --> 01:34:58.598
Hai: That's a lot of tokens. Bro, okay,


854
01:34:59.935 --> 01:35:05.055
Hai: I'm down to do another recipe. I'm down to like copy less of this


855
01:35:05.185 --> 01:35:06.235
Meri Nova: That's a lot


856
01:35:06.855 --> 01:35:07.545
Hai: Yeah, because again.


857
01:35:07.545 --> 01:35:08.405
Oren: Blocked. Yeah.


858
01:35:08.405 --> 01:35:11.425
Hai: A lot of this is just like the Svg icons and stuff


859
01:35:12.115 --> 01:35:13.345
Oren: Yeah. I don't know why


860
01:35:14.135 --> 01:35:21.954
Hai: Well, that's the raw HTML. But if you want like clean Markdown, you can do this, which is like, you know, pretty easy for a model.


861
01:35:22.285 --> 01:35:26.954
Hai: I guess I was trying to like. See if the model can like, just look at straight HTML, and like do it.


862
01:35:27.720 --> 01:35:31.555
Hai: I can just copy of half of it, I don't know which half


863
01:35:32.285 --> 01:35:34.755
Meri Nova: I think different. Page


864
01:35:35.385 --> 01:35:39.985
Hai: They're all going to have these like Svgs. We're not going to be able to


865
01:35:41.035 --> 01:35:42.075
Meri Nova: Let's see.


866
01:35:42.385 --> 01:35:52.504
Hai: But you know, we can just choose, because 128,000 right? And it was a hundred 37,000 tokens, so if I choose half, if I take up half of it, there should be plenty of room


867
01:35:52.505 --> 01:35:54.505
Oren: Yeah, you can cut all the sheet. And yeah.


868
01:35:54.725 --> 01:35:56.394
Hai: Yeah. Let me use this.


869
01:35:57.795 --> 01:36:00.634
Meri Nova: What kind of recipe is that, my gosh


870
01:36:01.885 --> 01:36:02.605
Hai: Creep.


871
01:36:03.575 --> 01:36:04.255
Hai: Okay.


872
01:36:04.255 --> 01:36:05.654
Oren: Something very technical.


873
01:36:06.415 --> 01:36:07.734
Hai: Something very technical.


874
01:36:08.825 --> 01:36:12.614
Hai: Boom recipe in here. Boom, save


875
01:36:14.225 --> 01:36:15.454
Oren: Good for machines.


876
01:36:16.356 --> 01:36:18.665
Hai: Alright, we're running this again.


877
01:36:19.455 --> 01:36:22.324
Hai: Boom. Now, we're talking now it's loading.


878
01:36:23.735 --> 01:36:27.625
Hai: all right start start betting go on polymarket is this going to error out again.


879
01:36:27.935 --> 01:36:28.965
Hai: I doubt it.


880
01:36:31.075 --> 01:36:33.264
Hai: Oh, my God!


881
01:36:33.265 --> 01:36:34.511
Meri Nova: Let's go.


882
01:36:35.135 --> 01:36:35.864
Hai: My God!


883
01:36:36.025 --> 01:36:37.205
Hai: What happened?


884
01:36:38.035 --> 01:36:39.695
Meri Nova: And ran, look at that


885
01:36:41.595 --> 01:36:48.675
Hai: Oh, right it was. It was a good generation. We just didn't parse it in our response.


886
01:36:49.405 --> 01:36:52.524
Hai: That's why it gave us like a whole bunch of stuff here. So


887
01:36:53.555 --> 01:36:55.765
Hai: the the key is is called object.


888
01:36:56.165 --> 01:37:01.855
Hai: I'm just gonna add here, object. And then we got ingredients. We got steps. We got


889
01:37:02.565 --> 01:37:05.874
Hai: time and effort. Easy. Not sure where they got it from.


890
01:37:06.405 --> 01:37:08.495
Hai: Does it say? Easy in here anywhere?


891
01:37:13.125 --> 01:37:21.725
Hai: No, no, no, regardless of which. Oh, okay, I guess.


892
01:37:21.885 --> 01:37:23.335
Hai: like, I said, it is easy.


893
01:37:23.675 --> 01:37:25.164
Hai: The information is in here.


894
01:37:28.595 --> 01:37:32.224
Hai: Cool. Okay, let me parse this real quick. And then I'm just gonna


895
01:37:32.445 --> 01:37:36.535
Hai: do that. So one last thing, because that was a long response.


896
01:37:37.255 --> 01:37:43.044
Hai: So when you do structure outputs in AI SDK, it comes to in the object key.


897
01:37:44.465 --> 01:37:47.995
Hai: And then now you can save this into a dB like pretty easily.


898
01:37:49.745 --> 01:37:53.655
Hai: I wish I had more time to do like 2 calling, but I'm getting pretty pretty tired right now.


899
01:37:53.835 --> 01:38:00.995
Hai: But yeah, structure output. And then you can parse this array save each one into the dB stuff like that.


900
01:38:01.935 --> 01:38:08.545
Hai: Yep, I'm gonna push this out. So if you guys need like like


901
01:38:18.885 --> 01:38:19.874
Hai: beep beep, beep


902
01:38:20.755 --> 01:38:24.954
Meri Nova: Homework be for this week using tool calling


903
01:38:25.355 --> 01:38:27.894
Meri Nova: and structured outputs in your apps.


904
01:38:30.150 --> 01:38:37.035
Hai: I I feel we should do our homework as like.


905
01:38:38.325 --> 01:38:49.055
Hai: I wonder if we should even do homeworks, because, like you guys are all building your own stuff. Some of you guys are already using this. If you haven't used this, and this gives you an idea to build something, then, yeah, go ahead and do it.


906
01:38:49.375 --> 01:38:53.985
Hai: Are you already on track to use tools and structure outputs?


907
01:38:55.355 --> 01:38:56.575
Meri Nova: I guess


908
01:38:56.695 --> 01:38:59.644
Hai: If you have questions, now's the time to ask.


909
01:39:02.915 --> 01:39:09.025
Meri Nova: Yeah, it's always about the progress in your project, anyway. So it doesn't really have to be about the topic


910
01:39:10.475 --> 01:39:19.175
Hai: I feel like every every week we do this. It's kind of a way to like kind of inspire you to think about. Use cases to build as opposed to. Oh, you have to do this


911
01:39:19.805 --> 01:39:21.995
Hai: Because I kind of wanted you guys to think as like


912
01:39:22.405 --> 01:39:24.085
Hai: like, you're building a product instead of like


913
01:39:24.795 --> 01:39:37.674
Hai: me telling you what to build, because, like your users, are not going to tell you what to build. They'll tell you what they think you should build, which you, always taking. Take it with a grain of salt. You should have some sort of opinion about what you're trying to build.


914
01:39:37.795 --> 01:39:39.194
Hai: have tastes around


915
01:39:39.395 --> 01:39:46.145
Hai: what's important, and then deliver it because people will be asking for horses right if we we ask them.


916
01:39:46.475 --> 01:39:48.025
Hai: But they didn't want to make cars.


917
01:39:52.215 --> 01:39:54.585
Hai: Structured outputs.


918
01:39:57.325 --> 01:40:02.045
Hai: I think that French domain. Yeah, there we go. So it should be on here now.


919
01:40:04.635 --> 01:40:05.625
Hai: Boom!


920
01:40:09.225 --> 01:40:14.195
Hai: Yep, that's it for tonight. We're like what?


921
01:40:14.295 --> 01:40:16.785
Hai: 4 weeks away, including this week


922
01:40:17.815 --> 01:40:18.895
Meri Nova: 3 weeks.


923
01:40:20.315 --> 01:40:29.524
Hai: Oh, I thought, it's like a 6 weeks. Okay, we're 3 weeks away. So you guys gotta get on it. You know, if you need anything. Let me know. Let Mary know


924
01:40:29.685 --> 01:40:35.265
Hai: we're here for you guys. But I want you guys to cross the finish line. I want you guys to like, deploy your projects.


925
01:40:35.515 --> 01:40:37.055
Hai: feel super proud about it.


926
01:40:38.875 --> 01:40:42.574
Hai: Type shit. Well, I mean, this is like recorded. So


927
01:40:42.725 --> 01:40:46.544
Hai: probably should have said that. But I said that a lot during the hackathon


928
01:40:48.165 --> 01:40:55.164
Meri Nova: That's what you should be talking about, actually, and walking us through your project. That would have been more fun for me, at least.


929
01:40:55.355 --> 01:41:02.135
Hai: Oh, I mean, if you're sticking around, let me do that right real quick, quick, 30 seconds overview. So


930
01:41:02.705 --> 01:41:08.435
Hai: what this does, is it? Yeah, let me pull it up. Pnpm, dev,


931
01:41:12.455 --> 01:41:22.574
Hai: I think it should be running right now. 3,000, perhaps. Yeah. So this is what it looks like. You can drop in like a Github URL of any project.


932
01:41:22.845 --> 01:41:26.904
Hai: and it should be able to tell you how to rebuild it feature by feature.


933
01:41:27.285 --> 01:41:31.234
Hai: So let's say we have the. We have this, for example.


934
01:41:31.645 --> 01:41:33.024
Hai: I don't know if I can


935
01:41:33.265 --> 01:41:33.835
Meri Nova: I don't know if you can


936
01:41:33.835 --> 01:41:34.905
Hai: You messed it.


937
01:41:34.905 --> 01:41:36.975
Meri Nova: Short, it's not fun.


938
01:41:38.405 --> 01:41:38.915
Hai: What?


939
01:41:42.845 --> 01:41:50.224
Hai: Oh, it can't do, nested both. So let's see if I do. My github trying to find something


940
01:41:51.235 --> 01:41:52.292
Hai: kind of like


941
01:41:52.645 --> 01:41:53.845
Meri Nova: Dolanger.


942
01:41:54.610 --> 01:41:56.094
Hai: Yeah, I must go right here.


943
01:41:57.575 --> 01:42:01.535
Hai: Go here, drop the URL in explore.


944
01:42:01.815 --> 01:42:05.995
Hai: So it pulls in basically all the code from that particular repo.


945
01:42:06.155 --> 01:42:16.184
Hai: and then, you know, you can check, you see. Oh, this is the the actual repo. I can read the code from here, but that's not the special part. The special part is in this tab right here. It says, features walkthroughs.


946
01:42:16.525 --> 01:42:21.005
Hai: But I want to show you this first.st So there's this thing called Lms dot txt, which means that


947
01:42:21.145 --> 01:42:31.044
Hai: this is basically the entire code base that I just pasted in. But in one long string, so that this can be used. When I go to cursor. I can paste this whole thing in and start asking questions.


948
01:42:31.255 --> 01:42:35.705
Hai: That's cool. But this right here is what I spend most of my time on.


949
01:42:36.035 --> 01:42:39.824
Hai: It's called features walkthroughs. So what it's doing right now, is it?


950
01:42:39.985 --> 01:42:52.004
Hai: Basically looked at this. And then it ran, Gemini, 2.0 flash to kind of like, look up all the features that is available in the code base.


951
01:42:52.205 --> 01:42:53.895
Hai: And let me show you that real quick.


952
01:42:54.175 --> 01:42:58.985
Hai: So I use a server server function, server action


953
01:42:59.205 --> 01:43:03.415
Hai: for this. I think it's called generic features right here. Yep.


954
01:43:04.145 --> 01:43:11.375
Hai: and then here, what I do is I ran the but but


955
01:43:11.665 --> 01:43:15.765
Hai: I ran the AI SDK generate object function that we just saw earlier.


956
01:43:16.165 --> 01:43:32.954
Hai: And then I pass in a schema, and then I have a system message, and the prompt that says, analyze this code base. And here's what the schema looks like. It's also zod, and it's basically an array. So it's an object first, st and then in that object there's an array


957
01:43:33.335 --> 01:43:37.254
Hai: of a string, and then I have to give a description.


958
01:43:37.625 --> 01:43:46.534
Hai: so you can give a description inside of a zot schema, so that your AI has an easier time generating the structure output for you.


959
01:43:47.165 --> 01:43:52.035
Hai: because maybe, when I say list of features, I need to clarify. What do I mean by that? Right?


960
01:43:52.385 --> 01:43:54.054
Hai: That's why I have a describe key here.


961
01:43:54.815 --> 01:44:01.034
Hai: pretty straightforward, right like it's just a list of strings. And as you can see these are the strings.


962
01:44:02.605 --> 01:44:09.544
Hai: This is shrink. So map scraping, using playwright. HTML, tag, extraction. These are all the features that were included in the repo.


963
01:44:09.885 --> 01:44:21.204
Hai: So as somebody who's completely new to this repo, it's easier for you to look at this and be like, Oh, it can do this. It can do that. I can learn that as opposed to like all code. Then you got to go and dig in like, see? Like what what's doing, what?


964
01:44:21.925 --> 01:44:25.735
Hai: So that's the generate features server action.


965
01:44:26.535 --> 01:44:35.574
Hai: And then, yeah. And then here, what I can do is I can click on any of these, or I can search for ones, I can say, like scrape or something.


966
01:44:36.075 --> 01:44:42.545
Hai: But I maybe I want to do this. I want to click on this. Now it's going to run another server action to


967
01:44:42.915 --> 01:44:49.855
Hai: generate a walk a walkthrough. So this is where I use gemini 2.0


968
01:44:50.315 --> 01:44:55.344
Hai: pro, I think, and then it was breaking all the time, because sometimes the code base is very long.


969
01:44:57.075 --> 01:44:59.344
Hai: The contact is very long. So


970
01:44:59.495 --> 01:45:02.265
Hai: I have a fallback to Openai, O 3 mini


971
01:45:02.960 --> 01:45:09.815
Hai: and this is like this huge system message to be like, Hey, like this is the code base you're supposed to generate. Blah blah.


972
01:45:10.165 --> 01:45:17.805
Hai: And then that's the system message, and then very important, you know, preserve all white space indentations. So that that looks nice.


973
01:45:18.155 --> 01:45:27.254
Hai: And then I just like stuff in the code-based content. And then the feature to implement, which is literally just the text that we just saw from the list


974
01:45:27.675 --> 01:45:29.435
Hai: so that it knows what we're trying to do.


975
01:45:29.905 --> 01:45:35.764
Hai: So the model is for flashlight, and then I pass in the schema. This is the Walkthrough schema.


976
01:45:35.995 --> 01:45:43.135
Hai: which has the file name, the full code of the file, which is like, if it's looking at a file, it should return the full code.


977
01:45:43.355 --> 01:45:50.955
Hai: The reason why I have this is because this is kind of a hack. I want to compare the current code to the full code of the file and then highlight it.


978
01:45:51.825 --> 01:46:03.845
Hai: What I should have done was parse this from like the initial repo pool and then not make the model do this again because it's just such a waste of tokens.


979
01:46:04.005 --> 01:46:08.764
Hai: And then the current code is like, Okay, which code are we talking about at this step?


980
01:46:08.865 --> 01:46:10.725
Hai: And then an explanation of the step?


981
01:46:11.445 --> 01:46:28.694
Hai: So it's almost kind of like a slideshow, in a sense. So now it's done. I just had to follow along with this. So first, st you know, you create a new file called Scriptpy, and then these are the link. I mean the code for that file. And then you click. Once you're done with that step you click on next.


982
01:46:28.855 --> 01:46:33.512
Hai: Now you're going to add these to the script to your script that py


983
01:46:34.045 --> 01:46:42.245
Hai: file, and it highlights the stuff that is new. And then there's this like new function down here, and then it tells you like, why we're doing it.


984
01:46:42.655 --> 01:46:46.345
Hai: And then last minute I had like a audio thing, too.


985
01:46:46.475 --> 01:46:48.394
Hai: so like, let's add a function.


986
01:46:48.815 --> 01:46:53.125
Hai: It was like, Tell you like, kind of got you through it.


987
01:46:54.915 --> 01:46:58.665
Hai: And then, if I leave it on, it'll actually go to the next stage automatically


988
01:46:59.345 --> 01:47:11.575
Hai: and then see that like, it'll just scroll to the part that you need to do, and it'll tell you like, why you're doing it, so that as you're coding along. You kind of like know the reason why you're doing certain things.


989
01:47:12.395 --> 01:47:22.335
Hai: and then you can keep doing that. And then by the end you would have a working whatever that you're trying to learn.


990
01:47:22.545 --> 01:47:26.505
Hai: So 9 steps to set up playwright.


991
01:47:27.345 --> 01:47:29.815
Hai: And this is pulled from the code base. So it's


992
01:47:29.925 --> 01:47:32.765
Hai: you're trying to learn a code base. Then you know, you can do that.


993
01:47:33.475 --> 01:47:42.515
Hai: And then this is the code to generate the the Walkthrough, and then the fallback is obviously Openai, because Gemini was kind of like finicky.


994
01:47:42.765 --> 01:47:49.885
Hai: So I have this strict mode here. I use, O 3 mini, which is a decent model, and it has a


995
01:47:50.165 --> 01:47:52.425
Hai: special property called reasoning effort.


996
01:47:52.565 --> 01:47:56.934
Hai: If I turn this to high, it'll take like forever to load. So I had a little bit low.


997
01:47:57.735 --> 01:47:59.585
Hai: and then this is repo mix.


998
01:47:59.975 --> 01:48:05.975
Hai: This is the tricky part, because repo mix is actually a cli tool. So what I had to do was, I had to like


999
01:48:06.135 --> 01:48:12.025
Hai: finesse it, so it run in the vercel like serverless function, which is kind of tricky.


1000
01:48:12.535 --> 01:48:16.535
Hai: This is probably this part I spend the most time on. To be honest.


1001
01:48:17.195 --> 01:48:18.235
Meri Nova: Wait.


1002
01:48:18.995 --> 01:48:20.675
Meri Nova: Can I ask a question?


1003
01:48:20.675 --> 01:48:21.235
Hai: Yeah.


1004
01:48:21.485 --> 01:48:27.774
Meri Nova: So on the generated walkthrough. I'm just curious how you're generating the ui like that


1005
01:48:28.615 --> 01:48:32.587
Hai: Oh, the ui, that's the ui stuff. So I have


1006
01:48:33.385 --> 01:48:34.315
Hai: See


1007
01:48:36.295 --> 01:48:45.204
Meri Nova: Because, like it generates after you generate the steps, and then it just creates the ui components around each step. No


1008
01:48:45.205 --> 01:48:47.514
Hai: This ui is pre-built. So


1009
01:48:47.705 --> 01:48:54.894
Hai: I made it so that once the data for the Walkthrough is available, then it will display this kind of like Walkthrough, editor like this


1010
01:48:54.895 --> 01:49:04.265
Meri Nova: Yeah, but like, on the left there's a number of steps right? So do you define, like, how many number of like slides you need to do for the ui


1011
01:49:04.265 --> 01:49:08.114
Hai: Oh, no, it will just take, however many it wants to generate.


1012
01:49:10.175 --> 01:49:14.935
Hai: So next, you know, if we go back here, we go to another one


1013
01:49:15.265 --> 01:49:20.204
Hai: could have been like 5 steps like I don't have like a specified number of steps, for it


1014
01:49:22.405 --> 01:49:26.014
Meri Nova: Yeah, that's what I'm asking, how do you get that into the ui? Because


1015
01:49:26.255 --> 01:49:33.045
Meri Nova: I know you can generate like strings right for the output. But what about ui components?


1016
01:49:33.255 --> 01:49:38.795
Hai: So this comes back like I said, like, it's, this is a list of stuff.


1017
01:49:38.935 --> 01:49:43.104
Hai: Yeah, let me show you the walkthrough. So this is an object.


1018
01:49:43.405 --> 01:49:48.844
Hai: Every every walkthrough step is an object that has a file, name.


1019
01:49:49.245 --> 01:49:56.084
Hai: the all the code, some of the code to highlight, and then an explanation, and then I


1020
01:49:56.475 --> 01:50:05.344
Hai: put that into the actual schema here, where it has, like a 1, property called steps, and the Steps property would just be a list of all these things.


1021
01:50:05.565 --> 01:50:13.464
Hai: basically, and then pass that to the generate object server action here.


1022
01:50:14.415 --> 01:50:17.704
Hai: where this says Schema, something that knows that. Oh.


1023
01:50:18.175 --> 01:50:24.925
Hai: when I input the your, the repo as text. I want structure, output out.


1024
01:50:25.405 --> 01:50:27.595
Hai: as I have declared in the other file.


1025
01:50:28.815 --> 01:50:39.924
Hai: So this is where I get this. The list of steps. And then once I get the list of steps, I'm going to display that in the Walkthrough editor here which is just react stuff.


1026
01:50:42.070 --> 01:50:42.835
Hai: Jesus.


1027
01:50:43.065 --> 01:50:47.768
Hai: He has a lot of stuff just to get like the editor working as well.


1028
01:50:49.825 --> 01:50:54.485
Hai: yeah. So once the steps are available, then we're just gonna like


1029
01:50:55.403 --> 01:50:57.795
Hai: do a bunch of stuff here.


1030
01:50:59.095 --> 01:51:01.334
Hai: I don't remember what I wrote here.


1031
01:51:01.805 --> 01:51:07.604
Hai: Oh, yeah, it's not like 2 h


1032
01:51:07.605 --> 01:51:10.364
Meri Nova: Okay, that's like a lot. Yeah, it's a lot of


1033
01:51:10.965 --> 01:51:13.524
Meri Nova: front end code. Apparently. Okay, cool


1034
01:51:13.525 --> 01:51:19.125
Hai: Yeah. So also a lot of vibe coding, too, as you can tell from, like the freaking comments that I never wrote here.


1035
01:51:19.678 --> 01:51:23.805
Hai: But essentially, there's like a component here, and there's a component here.


1036
01:51:24.285 --> 01:51:43.454
Hai: and then there's a component here. And then, once the steps are available, I'm just going to pass the data down to like this separately, this separately, this separately, because every step has, like complete context of like which step it is in the array the content of the file, and then the explanation. So


1037
01:51:44.165 --> 01:51:45.985
Meri Nova: Like in the metadata, or something


1038
01:51:47.485 --> 01:51:48.445
Meri Nova: Cool.


1039
01:51:49.275 --> 01:51:49.945
Hai: Ye.


1040
01:51:51.065 --> 01:51:51.905
Meri Nova: Right.


1041
01:51:52.485 --> 01:51:54.425
Hai: What are the highlights for?


1042
01:51:55.255 --> 01:51:56.145
Hai: Say that one more time


1043
01:51:56.792 --> 01:51:59.855
Gil: The highlights. What what are they for


1044
01:52:01.725 --> 01:52:02.684
Hai: The what sorry


1045
01:52:03.511 --> 01:52:05.294
Gil: The highlights on yellow


1046
01:52:05.295 --> 01:52:05.915
Hai: Oh.


1047
01:52:06.115 --> 01:52:15.184
Hai: the highlights are for you to know that, hey, this lot, this file is pretty long. But this is the 2 lines that we gonna be paying attention to.


1048
01:52:15.465 --> 01:52:19.935
Hai: So it's supposed to be, for like one step at a time and


1049
01:52:20.095 --> 01:52:28.574
Hai: the highlighted step, the highlighted code is the code that is just supposed to add in a step. But then it's really hard to prompt it to like. Just write that, because, as you can see, like


1050
01:52:28.825 --> 01:52:35.864
Hai: from here to here. It's supposed to highlight this honestly, but then, like it's kind of like screwed up there.


1051
01:52:37.525 --> 01:52:40.004
Hai: But if you don't quick, then people won't see it


1052
01:52:42.305 --> 01:52:43.555
Gil: Awesome. Thank you.


1053
01:52:43.775 --> 01:52:45.404
Oren: Yeah. It's a very cool project


1054
01:52:46.775 --> 01:52:47.485
Hai: Thank you.


1055
01:52:48.855 --> 01:52:53.395
Hai: I'm gonna build this out this week and then put a stripe link on it


1056
01:52:55.635 --> 01:52:58.034
Gil: Yep, make money, make it rain.


1057
01:52:58.265 --> 01:53:03.836
Meri Nova: Are you gonna sell it to us now? Hi, I thought, we're building internal tools


1058
01:53:04.185 --> 01:53:06.975
Hai: This every time I hit generate this shit cost me money, so


1059
01:53:07.275 --> 01:53:10.605
Meri Nova: Oh, that's right, that's right.


1060
01:53:14.115 --> 01:53:15.675
Hai: Pay for my time. My God.


1061
01:53:16.265 --> 01:53:18.335
Hai: it's gonna be like $2 a month or something


1062
01:53:18.935 --> 01:53:34.464
Meri Nova: I mean, heck people gonna pay 20 bucks a month if you want. It's a great educational project, but this is relevant for a few of the people, too, who are working on the Github or another learning platform stuff like that.


1063
01:53:35.085 --> 01:53:37.574
Meri Nova: Think, Melissa, you were building something like this


1064
01:53:37.575 --> 01:53:39.564
Hai: I built this for Gil. Do you know that


1065
01:53:40.015 --> 01:53:41.081
Meri Nova: Why, Gil!


1066
01:53:41.615 --> 01:53:42.355
Gil: You're driving.


1067
01:53:42.355 --> 01:53:42.695
Hai: About this


1068
01:53:43.665 --> 01:53:46.864
Gil: Because I'm the dumbest student. I need more help. Come on.


1069
01:53:47.735 --> 01:53:52.025
Hai: He asked me about it. He's like, I wish there's a tool that could explain to me


1070
01:53:52.375 --> 01:53:55.254
Hai: like just the stuff that I need from a code base that I found


1071
01:53:56.735 --> 01:54:03.255
Gil: I owe you, man any design you need. I'm your man. Actually, I think this would be a really really cool, startup product.


1072
01:54:03.805 --> 01:54:05.505
Gil: going to help a lot of people.


1073
01:54:07.085 --> 01:54:15.754
Gil: I'll drop a few ideas to you that that I got while I was using it. Maybe they are help helpful. But this is a really good tool.


1074
01:54:16.325 --> 01:54:17.385
Gil: Appreciate it


1075
01:54:17.945 --> 01:54:19.215
Hai: Please send them my way.


1076
01:54:19.365 --> 01:54:25.094
Hai: I have, every intention to productionize this, because


1077
01:54:27.545 --> 01:54:34.985
Hai: this honestly, when I like launched it had more market pull than like cats with bats. I'm like, man.


1078
01:54:35.115 --> 01:54:37.015
Hai: should I just do this


1079
01:54:37.015 --> 01:54:41.794
Meri Nova: What do you mean by Market Poll, like? How many people came up to talk to you about this, or what


1080
01:54:42.015 --> 01:54:45.055
Hai: Yeah, people will like, send me a link asap


1081
01:54:45.295 --> 01:54:48.174
Hai: need this need this stuff today.


1082
01:54:48.969 --> 01:55:00.914
Meri Nova: You know why, cause like I I told you today, too, there's gonna be more software engineers, thanks to AI now. And they're not gonna be like proper, I guess software engineers. But like the new generation of


1083
01:55:00.915 --> 01:55:02.184
Hai: Talking about you guys. By the way.


1084
01:55:04.795 --> 01:55:15.895
Meri Nova: Why are you outing me like that? No, no. But okay, yeah. Why not for vibe coders, basically. So more tools for vibe coders?


1085
01:55:16.405 --> 01:55:18.364
Meri Nova: Actually, yep.


1086
01:55:18.905 --> 01:55:25.964
Hai: This is basically a vibe coding tool. It only exists in the Vibe coding era. It cannot exist anywhere. Any other time in history.


1087
01:55:26.925 --> 01:55:29.715
Meri Nova: Yeah can't. Oh, my gosh!


1088
01:55:29.885 --> 01:55:33.515
Meri Nova: There's so much to build, all right.


1089
01:55:35.005 --> 01:55:42.204
Hai: So before we leave quick question for you guys, how far are you guys in your project like, how do you feel? Do you feel like you're stuck or doing. Okay.


1090
01:55:44.925 --> 01:55:49.605
Melissa: I feel good about my project. I'm in the AI implementation part.


1091
01:55:49.995 --> 01:55:50.685
Melissa: And


1092
01:55:51.185 --> 01:55:59.515
Melissa: yeah, it's a lot like I drop in one file and test that file, and I think it's all good. Then once I add multiple files, it's like debugging hell. But


1093
01:55:59.835 --> 01:56:04.215
Melissa: you know, I'm up to the challenges. It's it's pretty cool, seeing it come together.


1094
01:56:04.755 --> 01:56:07.252
Melissa: But it's it's it's it's a big task


1095
01:56:07.565 --> 01:56:07.945
Hai: Real.


1096
01:56:08.585 --> 01:56:09.535
Melissa: Yeah.


1097
01:56:10.845 --> 01:56:12.934
Hai: You're crushing it. By the way, keep going


1098
01:56:13.395 --> 01:56:14.485
Melissa: Thanks, thanks.


1099
01:56:15.195 --> 01:56:27.005
Athira Praveen: Yeah, I was focusing on the AI part and the Ui part up until now and then. Last week I just started on the dB, side of things and the auth and everything. I'm still


1100
01:56:27.285 --> 01:56:29.343
Athira Praveen: figuring out the kinks there.


1101
01:56:30.595 --> 01:56:38.944
Athira Praveen: currently having some issues with how the data is getting parsed into dB. But I think the structured response that we covered today might help


1102
01:56:39.055 --> 01:56:40.185
Athira Praveen: with some of that


1103
01:56:41.315 --> 01:56:42.745
Hai: Let me know how it goes


1104
01:56:43.295 --> 01:56:44.085
Athira Praveen: Thank you.


1105
01:56:47.195 --> 01:56:48.644
Oren: Very much the same that you had


1106
01:56:48.645 --> 01:56:49.045
Gil: That's awesome.


1107
01:56:49.285 --> 01:56:49.765
Oren: Go on!


1108
01:56:50.165 --> 01:56:51.345
Gil: No! No! Go ahead. All right.


1109
01:56:51.765 --> 01:56:52.725
Oren: Okay,


1110
01:56:53.825 --> 01:57:03.074
Oren: I was pretty stuck with a trying to get some structured output. So recipes basically and trying to vectorize it. Eventually.


1111
01:57:03.765 --> 01:57:08.705
Oren: I I think it's gonna be a huge help like to actually get it out structured. And


1112
01:57:08.965 --> 01:57:15.694
Oren: like also filter out a lot of scraping bullshit that I don't really need, but also getting


1113
01:57:16.325 --> 01:57:19.105
Oren: the best of it, like just the stuff I need.


1114
01:57:19.265 --> 01:57:22.375
Oren: And I think I'm just gonna push for all day this week.


1115
01:57:23.525 --> 01:57:24.175
Hai: Nice?


1116
01:57:24.925 --> 01:57:27.634
Hai: Are you using 5 crawl? Or what are you using


1117
01:57:28.775 --> 01:57:39.574
Oren: Not really fireball. But I was trying a lot of basic stuff. But I think I'm just gonna go on to beautiful, beautiful fireball.


1118
01:57:40.805 --> 01:57:41.965
Oren: I find a way just


1119
01:57:41.965 --> 01:57:42.595
Hai: No problem.


1120
01:57:43.105 --> 01:57:43.824
Oren: What is it?


1121
01:57:44.055 --> 01:57:54.155
Hai: I strongly recommend firecrawl, firecrawl with Markdown. The reason why they have Markdown is because of the use cases like what we saw with structured output and extraction


1122
01:57:55.865 --> 01:58:01.635
Oren: Just to make sense of it and getting all the stuff I need. I have like 10 different categories. I could vectorize


1123
01:58:03.175 --> 01:58:05.074
Oren: And then other use cases they want to do


1124
01:58:06.645 --> 01:58:07.195
Hai: Nice


1125
01:58:15.985 --> 01:58:17.034
Oren: Gail, it's your turn.


1126
01:58:17.695 --> 01:58:26.665
Gil: Cool, cool. So yeah, I'm I'm just trying to keep the scope really small. I was at the beginning. I was.


1127
01:58:26.665 --> 01:58:31.935
Gil: yeah, throwing, like many files into the data intake process for rag.


1128
01:58:32.435 --> 01:58:38.405
Gil: And yeah, kind of like what Melissa was saying. I was just spending a lot of time troubleshooting


1129
01:58:38.725 --> 01:58:45.795
Gil: the multiple multiple files. So I'm just making a fat single file and using that later


1130
01:58:45.795 --> 01:58:46.145
Hai: Yep.


1131
01:58:46.145 --> 01:58:51.854
Gil: I can improve it, you know. And then I'm trying to figure out how to make the


1132
01:58:52.195 --> 01:59:01.244
Gil: the output. That exactly the stuff that you were talking about today, how to get the model to provide that reliable Json output?


1133
01:59:01.415 --> 01:59:03.584
Gil: Because if anything changes


1134
01:59:03.755 --> 01:59:11.785
Gil: on the the Dsl doesn't work anymore, so everything that that you were saying today is is going to be really, really useful for me.


1135
01:59:12.635 --> 01:59:16.315
Gil: And that's where I am. I'm still on the notebook.


1136
01:59:16.925 --> 01:59:26.015
Gil: but this is like the the heavy lifting. Once I'm done with this, it's going to be easier to port it into, you know, a a python application, or


1137
01:59:26.125 --> 01:59:28.704
Gil: Netj, or something like that.


1138
01:59:29.485 --> 01:59:34.497
Gil: I'm still clueless about the I'm a designer, and I'm clueless about the Ui


1139
01:59:35.245 --> 01:59:39.694
Gil: stuff first, st but it's fun. I'm really excited


1140
01:59:40.925 --> 01:59:43.665
Hai: Yeah, man, keep me keep me updated. Seems like you're on the right track.


1141
01:59:45.535 --> 01:59:46.235
Gil: Thank you.


1142
01:59:51.245 --> 01:59:57.635
Athira Praveen: My AI, like response actually takes a lot of time. I'm not sure if that's


1143
01:59:57.835 --> 02:00:02.274
Athira Praveen: normal, like, it takes like 2, 3 min for the AI response to


1144
02:00:02.785 --> 02:00:03.385
Hai: Not normal.


1145
02:00:03.385 --> 02:00:05.726
Athira Praveen: Come on, that's not normal, right?


1146
02:00:06.445 --> 02:00:07.974
Athira Praveen: Never see something wrong.


1147
02:00:08.475 --> 02:00:12.734
Hai: Well, I guess depends. Are you using like o 1 pro or something?


1148
02:00:14.158 --> 02:00:17.825
Athira Praveen: No, I'm using the AI SDK.


1149
02:00:18.185 --> 02:00:23.364
Athira Praveen: 4 4 4 point Gpt. 4, I think.


1150
02:00:23.835 --> 02:00:24.545
Hai: No.


1151
02:00:25.425 --> 02:00:27.965
Athira Praveen: Yeah, at least. Yeah.


1152
02:00:28.235 --> 02:00:32.654
Hai: So without seeing the code or looking at logs. Can you, if you want to like.


1153
02:00:33.395 --> 02:00:40.324
Hai: add some tracing to your code, so like, add some logging to like the result. And what happens before the result


1154
02:00:41.375 --> 02:00:41.975
Athira Praveen: Yeah.


1155
02:00:42.165 --> 02:00:45.715
Hai: Maybe we can take a look at that together at some point over chat


1156
02:00:46.355 --> 02:00:50.144
Athira Praveen: Yeah, will it happen if my prompt is too big?


1157
02:00:51.655 --> 02:00:52.774
Hai: How big I'm talking


1158
02:00:52.945 --> 02:00:55.904
Athira Praveen: I mean, not that big, I mean, it's


1159
02:00:56.725 --> 02:00:59.415
Athira Praveen: I don't know how to explain how big it could be, but


1160
02:00:59.575 --> 02:01:03.364
Hai: It shouldn't matter, because I I pass like a whole repo into


1161
02:01:03.365 --> 02:01:06.624
Athira Praveen: No, no, no, it's not that big at all. It's like a page. Maybe


1162
02:01:07.195 --> 02:01:07.695
Hai: Yeah.


1163
02:01:08.015 --> 02:01:08.935
Athira Praveen: Yeah.


1164
02:01:09.305 --> 02:01:12.465
Athira Praveen: So when you say, like, yeah, maybe like.


1165
02:01:12.745 --> 02:01:17.285
Hai: Lock some stuff out into the console, because when you say


1166
02:01:17.535 --> 02:01:22.684
Hai: AI responds slow like, do you mean like when it shows up on the screen, or when it's like, actually


1167
02:01:22.685 --> 02:01:25.324
Athira Praveen: No, it's like in the loading state, in the thinking state


1168
02:01:26.305 --> 02:01:29.915
Hai: Oh, thinking state like you model right?


1169
02:01:30.205 --> 02:01:38.675
Athira Praveen: When it's just loading like when it's just when you submit, and then before it pops up into your screen like it takes


1170
02:01:38.945 --> 02:01:41.545
Athira Praveen: 2 to 3 min. Let me not 3, 2 and a half


1171
02:01:41.545 --> 02:01:42.995
Hai: 2 or 3 min


1172
02:01:42.995 --> 02:01:43.934
Athira Praveen: 2 min for sure.


1173
02:01:43.935 --> 02:01:46.485
Meri Nova: What! What is your stack? What are you using


1174
02:01:47.195 --> 02:01:48.975
Athira Praveen: Next year's typescript.


1175
02:01:50.705 --> 02:01:56.484
Athira Praveen: Yeah. So yeah, I'm I'm thinking, I should. Yeah, like, I said, add some traceability there.


1176
02:01:56.675 --> 02:01:59.395
Athira Praveen: Cause? Yeah, because I don't


1177
02:01:59.395 --> 02:02:05.064
Oren: Maybe add some times for the before and after to see if it improves. Once you do stuff, and


1178
02:02:05.745 --> 02:02:10.585
Oren: maybe it goes down to 90 seconds. Maybe it goes down to 60, but eventually


1179
02:02:10.945 --> 02:02:11.585
Athira Praveen: Yeah.


1180
02:02:11.915 --> 02:02:28.895
Hai: Yeah, actually, you should sign up for Langsmith, and then just add it to your code base. It's really simple, like, it's like one line of code, and then you have, like Openai tracing, and you can see like how long each each call to Openai will take under the latency.


1181
02:02:30.185 --> 02:02:35.615
Hai: and it's free, for, like 1, 1 million traces or something like that, so it should be free for


1182
02:02:35.615 --> 02:02:38.065
Athira Praveen: That's good. Yeah.


1183
02:02:38.715 --> 02:02:44.255
Hai: Yeah. So once we once you set up. So I strongly recommend set up setting up Blanksmith


1184
02:02:44.465 --> 02:02:45.715
Athira Praveen: And then


1185
02:02:45.865 --> 02:02:48.655
Hai: Show me the traces, and then we'll we'll see. We'll take it from there


1186
02:02:49.085 --> 02:02:49.934
Athira Praveen: Thank you.


1187
02:02:51.045 --> 02:02:51.655
Hai: Deep.


1188
02:03:06.025 --> 02:03:07.674
Hai: Come on, people, don't be shy


1189
02:03:12.725 --> 02:03:16.225
Dwayne Joseph: My project is going well. I'm implementing


1190
02:03:16.325 --> 02:03:19.333
Dwayne Joseph: the part where you can like


1191
02:03:20.145 --> 02:03:28.074
Dwayne Joseph: kind of have a coding agent for my HTML, Css. Code, editor, and I'm starting that process now.


1192
02:03:29.055 --> 02:03:29.855
Hai: Nice


1193
02:03:29.855 --> 02:03:32.235
Dwayne Joseph: Everything is, yeah, everything is looking good.


1194
02:03:32.555 --> 02:03:34.555
Dwayne Joseph: If I have questions I will let you know


1195
02:03:35.575 --> 02:03:37.464
Hai: Awesome man love to hear it


1196
02:03:46.745 --> 02:03:50.145
Ekta: About my progress up until Friday. And now


1197
02:03:50.869 --> 02:03:55.844
Ekta: so I was able to scrape so I I'm working on


1198
02:03:56.055 --> 02:04:08.394
Ekta: something like very similar to what Kelsey is doing, but in different domain. And like, it's, it's not very domain specific. It's like you would search any length of topics on the research.


1199
02:04:08.625 --> 02:04:13.224
Ekta: and then, the AI part would summarize the research for you.


1200
02:04:13.956 --> 02:04:20.835
Ekta: Re-rank it. And basically, after summaries, it would give you a resource direction.


1201
02:04:21.015 --> 02:04:38.594
Ekta: For example, if you say that I want to research on X topic and the existing research and the X topic, it would take the Delta and suggest you, what's the research direction? Exactly. How should you work on? And what should you focus on after summarizing the papers that exist in the space?


1202
02:04:38.695 --> 02:04:53.605
Ekta: So I'm pretty much able to find out all the papers like through different Apis, like not just a semantic scholar, but like pubmed AI generated also trying to use firecrawl like you suggested.


1203
02:04:53.715 --> 02:04:54.874
Ekta: and then


1204
02:04:56.015 --> 02:05:04.295
Ekta: it's it's going pretty smooth, and it's and the relevancy is also going pretty smooth like up until Friday I could get top 10 papers, which I'm going to squeeze on top 5,


1205
02:05:04.505 --> 02:05:13.604
Ekta: and then the the summary part. That's not working. So I'm fixing that because all of the time I was just white coding. Basically, I'm new to typescript.


1206
02:05:13.865 --> 02:05:16.785
Ekta: So I'm a little embarrassed like I did not


1207
02:05:16.785 --> 02:05:19.645
Hai: That we're clipping that play that on Linkedin


1208
02:05:22.355 --> 02:05:24.915
Ekta: So basically doing typescript.


1209
02:05:25.815 --> 02:05:36.675
Ekta: yeah, typescripting sorry using typescript and learning more of it. And trying to debug where I'm failing for the research summary.


1210
02:05:37.158 --> 02:05:42.804
Ekta: So right now, I'm stuck at. But the relevancy part is really good, like, it's it's throwing. Yeah.


1211
02:05:43.395 --> 02:05:44.925
Hai: That's awesome. How do you do your


1212
02:05:44.925 --> 02:05:47.435
Ekta: Moment for me. What was that sorry


1213
02:05:47.625 --> 02:05:49.054
Hai: How do you do your re-ranking


1214
02:05:49.475 --> 02:05:57.200
Ekta: So I just use Claude and Chat gpt for model, like 3.5. Sorry


1215
02:05:57.845 --> 02:06:09.084
Ekta: and use that formulae. That's the basic formulae that it grows like just a mathematical formula like, How is it calculating the context window? Sorry the tokens of all the


1216
02:06:09.295 --> 02:06:13.704
Ekta: embeddings? And then it gives you the highest score


1217
02:06:14.265 --> 02:06:19.194
Ekta: like in percent wise 100%, 78 blah blah. And then


1218
02:06:19.335 --> 02:06:29.375
Ekta: I'm just getting the numbers based on these models right now. So first, st Claude, Claude was expensive. So I'm just focusing on Gpt. And some free models


1219
02:06:29.899 --> 02:06:34.905
Hai: And I'm still trying to fine tune and sorry, still trying to optimize on that part. So


1220
02:06:35.578 --> 02:06:41.535
Ekta: But that was a good like learning for me, like, how is it using the relevancy on the topic


1221
02:06:42.145 --> 02:06:45.305
Hai: Yeah, that's interesting. How we do ranking like that.


1222
02:06:45.465 --> 02:06:47.044
Hai: It's cool. If it works, it works


1223
02:06:47.685 --> 02:07:02.383
Ekta: Yeah, I'm not using vector, dB, and all of that, I was just trying to get paper ids into super base right now. Not created my login page also. Because I just focused on getting, you know, working ui, and


1224
02:07:03.198 --> 02:07:19.034
Ekta: if I'm actually able to call the Apis etc, from different sources. I'll try to use tool calling for the cross referencing of multiple sources like being very specific for specific domain. If I need scientific papers, just, you know, just go through this. And if you need


1225
02:07:19.709 --> 02:07:24.784
Ekta: any other technology, papers go through other Api, etc. So


1226
02:07:24.895 --> 02:07:27.434
Ekta: let's see, how does that work? In my case.


1227
02:07:28.005 --> 02:07:28.815
Hai: Cool.


1228
02:07:28.925 --> 02:07:30.135
Hai: I'm excited to see it


1229
02:07:37.035 --> 02:07:43.605
Hai: is Tess. Here, Tess, Tess, I don't think Tessa's here anymore.


1230
02:07:45.355 --> 02:07:46.395
Hai: Frederick


1231
02:07:51.005 --> 02:07:51.865
Hai: Patrick


1232
02:07:52.717 --> 02:08:01.003
Frederick Z: Yeah, I do have do have questions. But you said you were tired about 30 min ago. So I don't wanna delay you. So.


1233
02:08:01.846 --> 02:08:28.235
Frederick Z: well, okay, fine. So so so basically, I'm working with 2 models right now, like, I have my, I have one Llm for my companion model, and I have another Llm. For my agent. So so what I'm doing is that I'm piping the output of my agent after they they finish their tool, calling back to back to the the the main companion model.


1234
02:08:28.235 --> 02:08:52.725
Frederick Z: Now, when I test these models individually, they seem to work pretty well. But when I when I combine the like, something something weird is happening like I don't know what lang graph is doing, but like like there's some sort of threading issue, because my main function, like the function that's supposed to only run once when you run streamlet, run it.


1235
02:08:52.725 --> 02:09:02.235
Frederick Z: Appy. It gets called again and again and again and again. So there's some sort of threading that's go going on that I'm not doing.


1236
02:09:02.235 --> 02:09:12.077
Frederick Z: That's going on in the background. But but I I guess the other thing is that the the model I'm using for the agent tool calling, which is Quinn?


1237
02:09:12.385 --> 02:09:35.594
Frederick Z: It's being very stochastic, like. So like, even though when I set the temperature to 0, it's still like sometimes it calls the tools, and other times it won't, even though the inputs the same. So I'm gonna try that thing. I'm gonna like, rename the function like the tool functions. I'm gonna adjust the system prompt. And I'm also


1238
02:09:35.595 --> 02:09:41.644
Hai: You might need to do some few shot there, because for smaller models like Quinn's models, few shotting usually helps


1239
02:09:41.985 --> 02:09:52.374
Frederick Z: Okay. Alright, alright, I will keep that in mind. But yeah. Yeah. So I'll see what progress I make by Wednesday, and if not. I'll I'll reach out to you again. Office hours


1240
02:09:52.655 --> 02:10:04.424
Hai: And there are 2 ways to do a few shouting, too. You can do a few shouting in the system message, so like, just literally say, like, here are some examples, or you can insert fake messages into your message history. That's like my my, go to


1241
02:10:05.305 --> 02:10:05.915
Frederick Z: Oh!


1242
02:10:06.055 --> 02:10:06.655
Hai: Yeah.


1243
02:10:06.985 --> 02:10:15.395
Frederick Z: Oh, okay, so so insert, insert synthetic messages into the history itself. Okay, he's really


1244
02:10:15.645 --> 02:10:19.426
Hai: I, from my experience, that has been a better performing


1245
02:10:20.025 --> 02:10:39.885
Hai: way to do it. So like, if you have a tool call message the message. See, you would have like a fake question, and then you have, like the right tool call after that from the assistant, and then just keep doing that for all the tools a couple of times, and then somehow, that's like super super clear for the model to know like, Oh, I should do this when this happens


1246
02:10:40.305 --> 02:10:45.765
Frederick Z: Huh? Okay, alright. So something to think about. Okay, thanks. Thanks. A lot


1247
02:10:46.095 --> 02:10:51.298
Hai: Yeah. And for the 1st question, I honestly don't know. Maybe if we can look at the code together or something. But


1248
02:10:52.115 --> 02:10:55.235
Hai: is your agent running like Async or Sync.


1249
02:10:55.721 --> 02:11:22.695
Frederick Z: No, no, I'm not doing, Tom what may. Maybe I should look into Async. But right now I'm not like I'm not labeling any of my functions as Async, because I was not expecting multi threading, but because there, it's being called sequentially like it's not like 2 models running at at the same time. It's like, first.st the the agent gets gets the user query, it runs it runs the tool calls like it needs, and then it pipes the output


1250
02:11:23.053 --> 02:11:30.575
Frederick Z: back into the the main main model. So like like, it's supposed to be done sequentially. So I didn't.


1251
02:11:30.875 --> 02:11:34.156
Frederick Z: No, I didn't think the need like I needed Async. But


1252
02:11:34.795 --> 02:11:40.715
Frederick Z: but yeah, well, yeah, we'll we'll see May. Maybe it's not that big of a deal, but we'll we'll see like


1253
02:11:40.985 --> 02:11:44.165
Hai: Oh, let me ask you something. Are you doing hands off like


1254
02:11:44.645 --> 02:11:50.975
Hai: through code, or like regular code? Or are you doing it through like land graphs. Api, because land graph has like a


1255
02:11:51.185 --> 02:11:59.004
Hai: like a node thing that can pass on to another agent. But it has to be like a land graph like method, and supposed to like


1256
02:12:00.295 --> 02:12:23.585
Frederick Z: I might be doing doing it through through. I'm definitely calling so like a certain language like, I'm building the like. I'm building the graph for for the agent routing protocol like like and then and then the result of that like I'm calling the stream method. So so that that might be it.


1257
02:12:24.205 --> 02:12:25.438
Frederick Z: Okay. But


1258
02:12:26.285 --> 02:12:49.544
Frederick Z: but but yeah, like, it's not necessarily problematic, like the output still going on, it's just weird, because I'm not. I'm not supposed to be doing multi threading. It's not something I'm doing on purpose. So we'll see. We'll see. Okay. But yeah, yeah, I'll I'll take her. I'll definitely take your advice into into consideration.


1259
02:12:50.515 --> 02:12:51.755
Hai: Yeah. Interesting problem.


1260
02:12:52.165 --> 02:12:54.564
Hai: I would be curious to see what you find.


1261
02:12:56.995 --> 02:13:05.565
Hai: Cool, alright guys. That's it for the stream today. Tune in tomorrow at one Pm. Est. To see me build couch tasks.


1262
02:13:07.795 --> 02:13:09.435
Meri Nova: Awesome. See? You guys.


1263
02:13:09.435 --> 02:13:11.064
Gil: Awesome. Thank you so much.


1264
02:13:11.065 --> 02:13:12.185
Dwayne Joseph: Good night.


1265
02:13:12.194 --> 02:13:12.844
Gil: David.


1266
02:13:13.755 --> 02:13:14.385
Hai: Peace.



